schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_array_comparison_exp {
  """is the array contained in the given array value"""
  _contained_in: [String!]

  """does the array contain the given value"""
  _contains: [String!]
  _eq: [String!]
  _gt: [String!]
  _gte: [String!]
  _in: [[String!]!]
  _is_null: Boolean
  _lt: [String!]
  _lte: [String!]
  _neq: [String!]
  _nin: [[String!]!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "appris_mv"
"""
type appris_mv {
  appris_annotation: String
  ncbi_transcript_reference: String
  provider_code: String
  sid: Int
  uid: uuid
}

"""
aggregated selection of "appris_mv"
"""
type appris_mv_aggregate {
  aggregate: appris_mv_aggregate_fields
  nodes: [appris_mv!]!
}

"""
aggregate fields of "appris_mv"
"""
type appris_mv_aggregate_fields {
  avg: appris_mv_avg_fields
  count(columns: [appris_mv_select_column!], distinct: Boolean): Int!
  max: appris_mv_max_fields
  min: appris_mv_min_fields
  stddev: appris_mv_stddev_fields
  stddev_pop: appris_mv_stddev_pop_fields
  stddev_samp: appris_mv_stddev_samp_fields
  sum: appris_mv_sum_fields
  var_pop: appris_mv_var_pop_fields
  var_samp: appris_mv_var_samp_fields
  variance: appris_mv_variance_fields
}

"""aggregate avg on columns"""
type appris_mv_avg_fields {
  sid: Float
}

"""
Boolean expression to filter rows from the table "appris_mv". All fields are combined with a logical 'AND'.
"""
input appris_mv_bool_exp {
  _and: [appris_mv_bool_exp!]
  _not: appris_mv_bool_exp
  _or: [appris_mv_bool_exp!]
  appris_annotation: String_comparison_exp
  ncbi_transcript_reference: String_comparison_exp
  provider_code: String_comparison_exp
  sid: Int_comparison_exp
  uid: uuid_comparison_exp
}

"""
unique or primary key constraints on table "appris_mv"
"""
enum appris_mv_constraint {
  """
  unique or primary key constraint on columns "uid"
  """
  idx_appris_uid
}

"""
input type for inserting data into table "appris_mv"
"""
input appris_mv_insert_input {
  appris_annotation: String
  ncbi_transcript_reference: String
  provider_code: String
  sid: Int
  uid: uuid
}

"""aggregate max on columns"""
type appris_mv_max_fields {
  appris_annotation: String
  ncbi_transcript_reference: String
  provider_code: String
  sid: Int
  uid: uuid
}

"""aggregate min on columns"""
type appris_mv_min_fields {
  appris_annotation: String
  ncbi_transcript_reference: String
  provider_code: String
  sid: Int
  uid: uuid
}

"""
input type for inserting object relation for remote table "appris_mv"
"""
input appris_mv_obj_rel_insert_input {
  data: appris_mv_insert_input!

  """upsert condition"""
  on_conflict: appris_mv_on_conflict
}

"""
on_conflict condition type for table "appris_mv"
"""
input appris_mv_on_conflict {
  constraint: appris_mv_constraint!
  update_columns: [appris_mv_update_column!]! = []
  where: appris_mv_bool_exp
}

"""Ordering options when selecting data from "appris_mv"."""
input appris_mv_order_by {
  appris_annotation: order_by
  ncbi_transcript_reference: order_by
  provider_code: order_by
  sid: order_by
  uid: order_by
}

"""
select columns of table "appris_mv"
"""
enum appris_mv_select_column {
  """column name"""
  appris_annotation

  """column name"""
  ncbi_transcript_reference

  """column name"""
  provider_code

  """column name"""
  sid

  """column name"""
  uid
}

"""aggregate stddev on columns"""
type appris_mv_stddev_fields {
  sid: Float
}

"""aggregate stddev_pop on columns"""
type appris_mv_stddev_pop_fields {
  sid: Float
}

"""aggregate stddev_samp on columns"""
type appris_mv_stddev_samp_fields {
  sid: Float
}

"""
Streaming cursor of the table "appris_mv"
"""
input appris_mv_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: appris_mv_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input appris_mv_stream_cursor_value_input {
  appris_annotation: String
  ncbi_transcript_reference: String
  provider_code: String
  sid: Int
  uid: uuid
}

"""aggregate sum on columns"""
type appris_mv_sum_fields {
  sid: Int
}

"""
update columns of table "appris_mv"
"""
enum appris_mv_update_column {
  """column name"""
  appris_annotation

  """column name"""
  ncbi_transcript_reference

  """column name"""
  provider_code

  """column name"""
  sid

  """column name"""
  uid
}

"""aggregate var_pop on columns"""
type appris_mv_var_pop_fields {
  sid: Float
}

"""aggregate var_samp on columns"""
type appris_mv_var_samp_fields {
  sid: Float
}

"""aggregate variance on columns"""
type appris_mv_variance_fields {
  sid: Float
}

scalar chromosome

"""
Boolean expression to compare columns of type "chromosome". All fields are combined with logical 'AND'.
"""
input chromosome_comparison_exp {
  _eq: chromosome
  _gt: chromosome
  _gte: chromosome
  _in: [chromosome!]
  _is_null: Boolean
  _lt: chromosome
  _lte: chromosome
  _neq: chromosome
  _nin: [chromosome!]
}

"""
columns and relationships of "clinvar_mv"
"""
type clinvar_mv {
  allele_id: String
  clinical_significance: String
  hgvsp_long: String
  oncogenicity: String
  origin_simple: String
  original_name: String
  sid: Int
  transcript_acc_num_full: String
  variant_key_hg19: String
  variant_key_hg38: String
}

"""
aggregated selection of "clinvar_mv"
"""
type clinvar_mv_aggregate {
  aggregate: clinvar_mv_aggregate_fields
  nodes: [clinvar_mv!]!
}

"""
aggregate fields of "clinvar_mv"
"""
type clinvar_mv_aggregate_fields {
  avg: clinvar_mv_avg_fields
  count(columns: [clinvar_mv_select_column!], distinct: Boolean): Int!
  max: clinvar_mv_max_fields
  min: clinvar_mv_min_fields
  stddev: clinvar_mv_stddev_fields
  stddev_pop: clinvar_mv_stddev_pop_fields
  stddev_samp: clinvar_mv_stddev_samp_fields
  sum: clinvar_mv_sum_fields
  var_pop: clinvar_mv_var_pop_fields
  var_samp: clinvar_mv_var_samp_fields
  variance: clinvar_mv_variance_fields
}

"""aggregate avg on columns"""
type clinvar_mv_avg_fields {
  sid: Float
}

"""
Boolean expression to filter rows from the table "clinvar_mv". All fields are combined with a logical 'AND'.
"""
input clinvar_mv_bool_exp {
  _and: [clinvar_mv_bool_exp!]
  _not: clinvar_mv_bool_exp
  _or: [clinvar_mv_bool_exp!]
  allele_id: String_comparison_exp
  clinical_significance: String_comparison_exp
  hgvsp_long: String_comparison_exp
  oncogenicity: String_comparison_exp
  origin_simple: String_comparison_exp
  original_name: String_comparison_exp
  sid: Int_comparison_exp
  transcript_acc_num_full: String_comparison_exp
  variant_key_hg19: String_comparison_exp
  variant_key_hg38: String_comparison_exp
}

"""aggregate max on columns"""
type clinvar_mv_max_fields {
  allele_id: String
  clinical_significance: String
  hgvsp_long: String
  oncogenicity: String
  origin_simple: String
  original_name: String
  sid: Int
  transcript_acc_num_full: String
  variant_key_hg19: String
  variant_key_hg38: String
}

"""aggregate min on columns"""
type clinvar_mv_min_fields {
  allele_id: String
  clinical_significance: String
  hgvsp_long: String
  oncogenicity: String
  origin_simple: String
  original_name: String
  sid: Int
  transcript_acc_num_full: String
  variant_key_hg19: String
  variant_key_hg38: String
}

"""Ordering options when selecting data from "clinvar_mv"."""
input clinvar_mv_order_by {
  allele_id: order_by
  clinical_significance: order_by
  hgvsp_long: order_by
  oncogenicity: order_by
  origin_simple: order_by
  original_name: order_by
  sid: order_by
  transcript_acc_num_full: order_by
  variant_key_hg19: order_by
  variant_key_hg38: order_by
}

"""
select columns of table "clinvar_mv"
"""
enum clinvar_mv_select_column {
  """column name"""
  allele_id

  """column name"""
  clinical_significance

  """column name"""
  hgvsp_long

  """column name"""
  oncogenicity

  """column name"""
  origin_simple

  """column name"""
  original_name

  """column name"""
  sid

  """column name"""
  transcript_acc_num_full

  """column name"""
  variant_key_hg19

  """column name"""
  variant_key_hg38
}

"""aggregate stddev on columns"""
type clinvar_mv_stddev_fields {
  sid: Float
}

"""aggregate stddev_pop on columns"""
type clinvar_mv_stddev_pop_fields {
  sid: Float
}

"""aggregate stddev_samp on columns"""
type clinvar_mv_stddev_samp_fields {
  sid: Float
}

"""
Streaming cursor of the table "clinvar_mv"
"""
input clinvar_mv_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: clinvar_mv_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input clinvar_mv_stream_cursor_value_input {
  allele_id: String
  clinical_significance: String
  hgvsp_long: String
  oncogenicity: String
  origin_simple: String
  original_name: String
  sid: Int
  transcript_acc_num_full: String
  variant_key_hg19: String
  variant_key_hg38: String
}

"""aggregate sum on columns"""
type clinvar_mv_sum_fields {
  sid: Int
}

"""aggregate var_pop on columns"""
type clinvar_mv_var_pop_fields {
  sid: Float
}

"""aggregate var_samp on columns"""
type clinvar_mv_var_samp_fields {
  sid: Float
}

"""aggregate variance on columns"""
type clinvar_mv_variance_fields {
  sid: Float
}

"""
Containing the oncogene and tumor suppressor information for transcripts
"""
type compermed_oncogene_ts {
  hgnc_id: String
  is_oncogene: Boolean!
  is_tumor_suppressor: Boolean!
  provider_code: String!
  sid: Int!
  uid: uuid
}

"""
aggregated selection of "compermed_oncogene_ts"
"""
type compermed_oncogene_ts_aggregate {
  aggregate: compermed_oncogene_ts_aggregate_fields
  nodes: [compermed_oncogene_ts!]!
}

"""
aggregate fields of "compermed_oncogene_ts"
"""
type compermed_oncogene_ts_aggregate_fields {
  avg: compermed_oncogene_ts_avg_fields
  count(columns: [compermed_oncogene_ts_select_column!], distinct: Boolean): Int!
  max: compermed_oncogene_ts_max_fields
  min: compermed_oncogene_ts_min_fields
  stddev: compermed_oncogene_ts_stddev_fields
  stddev_pop: compermed_oncogene_ts_stddev_pop_fields
  stddev_samp: compermed_oncogene_ts_stddev_samp_fields
  sum: compermed_oncogene_ts_sum_fields
  var_pop: compermed_oncogene_ts_var_pop_fields
  var_samp: compermed_oncogene_ts_var_samp_fields
  variance: compermed_oncogene_ts_variance_fields
}

"""aggregate avg on columns"""
type compermed_oncogene_ts_avg_fields {
  sid: Float
}

"""
Boolean expression to filter rows from the table "compermed_oncogene_ts". All fields are combined with a logical 'AND'.
"""
input compermed_oncogene_ts_bool_exp {
  _and: [compermed_oncogene_ts_bool_exp!]
  _not: compermed_oncogene_ts_bool_exp
  _or: [compermed_oncogene_ts_bool_exp!]
  hgnc_id: String_comparison_exp
  is_oncogene: Boolean_comparison_exp
  is_tumor_suppressor: Boolean_comparison_exp
  provider_code: String_comparison_exp
  sid: Int_comparison_exp
  uid: uuid_comparison_exp
}

"""
unique or primary key constraints on table "compermed_oncogene_ts"
"""
enum compermed_oncogene_ts_constraint {
  """
  unique or primary key constraint on columns "sid"
  """
  compermed_oncogene_ts_pkey

  """
  unique or primary key constraint on columns "uid"
  """
  compermed_oncogene_ts_uid_key
}

"""
input type for incrementing numeric columns in table "compermed_oncogene_ts"
"""
input compermed_oncogene_ts_inc_input {
  sid: Int
}

"""
input type for inserting data into table "compermed_oncogene_ts"
"""
input compermed_oncogene_ts_insert_input {
  hgnc_id: String
  is_oncogene: Boolean
  is_tumor_suppressor: Boolean
  provider_code: String
  sid: Int
  uid: uuid
}

"""aggregate max on columns"""
type compermed_oncogene_ts_max_fields {
  hgnc_id: String
  provider_code: String
  sid: Int
  uid: uuid
}

"""aggregate min on columns"""
type compermed_oncogene_ts_min_fields {
  hgnc_id: String
  provider_code: String
  sid: Int
  uid: uuid
}

"""
response of any mutation on the table "compermed_oncogene_ts"
"""
type compermed_oncogene_ts_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [compermed_oncogene_ts!]!
}

"""
on_conflict condition type for table "compermed_oncogene_ts"
"""
input compermed_oncogene_ts_on_conflict {
  constraint: compermed_oncogene_ts_constraint!
  update_columns: [compermed_oncogene_ts_update_column!]! = []
  where: compermed_oncogene_ts_bool_exp
}

"""Ordering options when selecting data from "compermed_oncogene_ts"."""
input compermed_oncogene_ts_order_by {
  hgnc_id: order_by
  is_oncogene: order_by
  is_tumor_suppressor: order_by
  provider_code: order_by
  sid: order_by
  uid: order_by
}

"""primary key columns input for table: compermed_oncogene_ts"""
input compermed_oncogene_ts_pk_columns_input {
  sid: Int!
}

"""
select columns of table "compermed_oncogene_ts"
"""
enum compermed_oncogene_ts_select_column {
  """column name"""
  hgnc_id

  """column name"""
  is_oncogene

  """column name"""
  is_tumor_suppressor

  """column name"""
  provider_code

  """column name"""
  sid

  """column name"""
  uid
}

"""
input type for updating data in table "compermed_oncogene_ts"
"""
input compermed_oncogene_ts_set_input {
  hgnc_id: String
  is_oncogene: Boolean
  is_tumor_suppressor: Boolean
  provider_code: String
  sid: Int
  uid: uuid
}

"""aggregate stddev on columns"""
type compermed_oncogene_ts_stddev_fields {
  sid: Float
}

"""aggregate stddev_pop on columns"""
type compermed_oncogene_ts_stddev_pop_fields {
  sid: Float
}

"""aggregate stddev_samp on columns"""
type compermed_oncogene_ts_stddev_samp_fields {
  sid: Float
}

"""
Streaming cursor of the table "compermed_oncogene_ts"
"""
input compermed_oncogene_ts_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: compermed_oncogene_ts_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input compermed_oncogene_ts_stream_cursor_value_input {
  hgnc_id: String
  is_oncogene: Boolean
  is_tumor_suppressor: Boolean
  provider_code: String
  sid: Int
  uid: uuid
}

"""aggregate sum on columns"""
type compermed_oncogene_ts_sum_fields {
  sid: Int
}

"""
update columns of table "compermed_oncogene_ts"
"""
enum compermed_oncogene_ts_update_column {
  """column name"""
  hgnc_id

  """column name"""
  is_oncogene

  """column name"""
  is_tumor_suppressor

  """column name"""
  provider_code

  """column name"""
  sid

  """column name"""
  uid
}

input compermed_oncogene_ts_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: compermed_oncogene_ts_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: compermed_oncogene_ts_set_input

  """filter the rows which have to be updated"""
  where: compermed_oncogene_ts_bool_exp!
}

"""aggregate var_pop on columns"""
type compermed_oncogene_ts_var_pop_fields {
  sid: Float
}

"""aggregate var_samp on columns"""
type compermed_oncogene_ts_var_samp_fields {
  sid: Float
}

"""aggregate variance on columns"""
type compermed_oncogene_ts_variance_fields {
  sid: Float
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "exon"
"""
type exon {
  attributes(
    """JSON select path"""
    path: String
  ): jsonb
  chromosome: chromosome!
  end: Int
  exon_number: Int
  exon_range: int4range
  exon_type: exon_type
  is_forward_strand: Boolean

  """An object relationship"""
  provider: provider!
  provider_code: String!
  sid: Int!
  start: Int
  trad_end: Int
  trad_start: Int

  """An object relationship"""
  transcript: transcript
  transcript_uid: uuid
  uid: uuid
}

"""
aggregated selection of "exon"
"""
type exon_aggregate {
  aggregate: exon_aggregate_fields
  nodes: [exon!]!
}

input exon_aggregate_bool_exp {
  bool_and: exon_aggregate_bool_exp_bool_and
  bool_or: exon_aggregate_bool_exp_bool_or
  count: exon_aggregate_bool_exp_count
}

input exon_aggregate_bool_exp_bool_and {
  arguments: exon_select_column_exon_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: exon_bool_exp
  predicate: Boolean_comparison_exp!
}

input exon_aggregate_bool_exp_bool_or {
  arguments: exon_select_column_exon_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: exon_bool_exp
  predicate: Boolean_comparison_exp!
}

input exon_aggregate_bool_exp_count {
  arguments: [exon_select_column!]
  distinct: Boolean
  filter: exon_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "exon"
"""
type exon_aggregate_fields {
  avg: exon_avg_fields
  count(columns: [exon_select_column!], distinct: Boolean): Int!
  max: exon_max_fields
  min: exon_min_fields
  stddev: exon_stddev_fields
  stddev_pop: exon_stddev_pop_fields
  stddev_samp: exon_stddev_samp_fields
  sum: exon_sum_fields
  var_pop: exon_var_pop_fields
  var_samp: exon_var_samp_fields
  variance: exon_variance_fields
}

"""
order by aggregate values of table "exon"
"""
input exon_aggregate_order_by {
  avg: exon_avg_order_by
  count: order_by
  max: exon_max_order_by
  min: exon_min_order_by
  stddev: exon_stddev_order_by
  stddev_pop: exon_stddev_pop_order_by
  stddev_samp: exon_stddev_samp_order_by
  sum: exon_sum_order_by
  var_pop: exon_var_pop_order_by
  var_samp: exon_var_samp_order_by
  variance: exon_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input exon_append_input {
  attributes: jsonb
}

"""
input type for inserting array relation for remote table "exon"
"""
input exon_arr_rel_insert_input {
  data: [exon_insert_input!]!

  """upsert condition"""
  on_conflict: exon_on_conflict
}

"""aggregate avg on columns"""
type exon_avg_fields {
  end: Float
  exon_number: Float
  sid: Float
  start: Float
  trad_end: Float
  trad_start: Float
}

"""
order by avg() on columns of table "exon"
"""
input exon_avg_order_by {
  end: order_by
  exon_number: order_by
  sid: order_by
  start: order_by
  trad_end: order_by
  trad_start: order_by
}

"""
Boolean expression to filter rows from the table "exon". All fields are combined with a logical 'AND'.
"""
input exon_bool_exp {
  _and: [exon_bool_exp!]
  _not: exon_bool_exp
  _or: [exon_bool_exp!]
  attributes: jsonb_comparison_exp
  chromosome: chromosome_comparison_exp
  end: Int_comparison_exp
  exon_number: Int_comparison_exp
  exon_range: int4range_comparison_exp
  exon_type: exon_type_comparison_exp
  is_forward_strand: Boolean_comparison_exp
  provider: provider_bool_exp
  provider_code: String_comparison_exp
  sid: Int_comparison_exp
  start: Int_comparison_exp
  trad_end: Int_comparison_exp
  trad_start: Int_comparison_exp
  transcript: transcript_bool_exp
  transcript_uid: uuid_comparison_exp
  uid: uuid_comparison_exp
}

"""
unique or primary key constraints on table "exon"
"""
enum exon_constraint {
  """
  unique or primary key constraint on columns "sid"
  """
  exon_pkey

  """
  unique or primary key constraint on columns "uid"
  """
  exon_uid_key
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input exon_delete_at_path_input {
  attributes: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input exon_delete_elem_input {
  attributes: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input exon_delete_key_input {
  attributes: String
}

"""
input type for incrementing numeric columns in table "exon"
"""
input exon_inc_input {
  end: Int
  exon_number: Int
  sid: Int
  start: Int
  trad_end: Int
  trad_start: Int
}

"""
input type for inserting data into table "exon"
"""
input exon_insert_input {
  attributes: jsonb
  chromosome: chromosome
  end: Int
  exon_number: Int
  exon_type: exon_type
  is_forward_strand: Boolean
  provider: provider_obj_rel_insert_input
  provider_code: String
  sid: Int
  start: Int
  trad_end: Int
  trad_start: Int
  transcript: transcript_obj_rel_insert_input
  transcript_uid: uuid
  uid: uuid
}

"""aggregate max on columns"""
type exon_max_fields {
  chromosome: chromosome
  end: Int
  exon_number: Int
  exon_type: exon_type
  provider_code: String
  sid: Int
  start: Int
  trad_end: Int
  trad_start: Int
  transcript_uid: uuid
  uid: uuid
}

"""
order by max() on columns of table "exon"
"""
input exon_max_order_by {
  chromosome: order_by
  end: order_by
  exon_number: order_by
  exon_type: order_by
  provider_code: order_by
  sid: order_by
  start: order_by
  trad_end: order_by
  trad_start: order_by
  transcript_uid: order_by
  uid: order_by
}

"""aggregate min on columns"""
type exon_min_fields {
  chromosome: chromosome
  end: Int
  exon_number: Int
  exon_type: exon_type
  provider_code: String
  sid: Int
  start: Int
  trad_end: Int
  trad_start: Int
  transcript_uid: uuid
  uid: uuid
}

"""
order by min() on columns of table "exon"
"""
input exon_min_order_by {
  chromosome: order_by
  end: order_by
  exon_number: order_by
  exon_type: order_by
  provider_code: order_by
  sid: order_by
  start: order_by
  trad_end: order_by
  trad_start: order_by
  transcript_uid: order_by
  uid: order_by
}

"""
response of any mutation on the table "exon"
"""
type exon_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [exon!]!
}

"""
on_conflict condition type for table "exon"
"""
input exon_on_conflict {
  constraint: exon_constraint!
  update_columns: [exon_update_column!]! = []
  where: exon_bool_exp
}

"""Ordering options when selecting data from "exon"."""
input exon_order_by {
  attributes: order_by
  chromosome: order_by
  end: order_by
  exon_number: order_by
  exon_range: order_by
  exon_type: order_by
  is_forward_strand: order_by
  provider: provider_order_by
  provider_code: order_by
  sid: order_by
  start: order_by
  trad_end: order_by
  trad_start: order_by
  transcript: transcript_order_by
  transcript_uid: order_by
  uid: order_by
}

"""primary key columns input for table: exon"""
input exon_pk_columns_input {
  sid: Int!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input exon_prepend_input {
  attributes: jsonb
}

"""
select columns of table "exon"
"""
enum exon_select_column {
  """column name"""
  attributes

  """column name"""
  chromosome

  """column name"""
  end

  """column name"""
  exon_number

  """column name"""
  exon_range

  """column name"""
  exon_type

  """column name"""
  is_forward_strand

  """column name"""
  provider_code

  """column name"""
  sid

  """column name"""
  start

  """column name"""
  trad_end

  """column name"""
  trad_start

  """column name"""
  transcript_uid

  """column name"""
  uid
}

"""
select "exon_aggregate_bool_exp_bool_and_arguments_columns" columns of table "exon"
"""
enum exon_select_column_exon_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  is_forward_strand
}

"""
select "exon_aggregate_bool_exp_bool_or_arguments_columns" columns of table "exon"
"""
enum exon_select_column_exon_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  is_forward_strand
}

"""
input type for updating data in table "exon"
"""
input exon_set_input {
  attributes: jsonb
  chromosome: chromosome
  end: Int
  exon_number: Int
  exon_type: exon_type
  is_forward_strand: Boolean
  provider_code: String
  sid: Int
  start: Int
  trad_end: Int
  trad_start: Int
  transcript_uid: uuid
  uid: uuid
}

"""aggregate stddev on columns"""
type exon_stddev_fields {
  end: Float
  exon_number: Float
  sid: Float
  start: Float
  trad_end: Float
  trad_start: Float
}

"""
order by stddev() on columns of table "exon"
"""
input exon_stddev_order_by {
  end: order_by
  exon_number: order_by
  sid: order_by
  start: order_by
  trad_end: order_by
  trad_start: order_by
}

"""aggregate stddev_pop on columns"""
type exon_stddev_pop_fields {
  end: Float
  exon_number: Float
  sid: Float
  start: Float
  trad_end: Float
  trad_start: Float
}

"""
order by stddev_pop() on columns of table "exon"
"""
input exon_stddev_pop_order_by {
  end: order_by
  exon_number: order_by
  sid: order_by
  start: order_by
  trad_end: order_by
  trad_start: order_by
}

"""aggregate stddev_samp on columns"""
type exon_stddev_samp_fields {
  end: Float
  exon_number: Float
  sid: Float
  start: Float
  trad_end: Float
  trad_start: Float
}

"""
order by stddev_samp() on columns of table "exon"
"""
input exon_stddev_samp_order_by {
  end: order_by
  exon_number: order_by
  sid: order_by
  start: order_by
  trad_end: order_by
  trad_start: order_by
}

"""
Streaming cursor of the table "exon"
"""
input exon_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: exon_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input exon_stream_cursor_value_input {
  attributes: jsonb
  chromosome: chromosome
  end: Int
  exon_number: Int
  exon_range: int4range
  exon_type: exon_type
  is_forward_strand: Boolean
  provider_code: String
  sid: Int
  start: Int
  trad_end: Int
  trad_start: Int
  transcript_uid: uuid
  uid: uuid
}

"""aggregate sum on columns"""
type exon_sum_fields {
  end: Int
  exon_number: Int
  sid: Int
  start: Int
  trad_end: Int
  trad_start: Int
}

"""
order by sum() on columns of table "exon"
"""
input exon_sum_order_by {
  end: order_by
  exon_number: order_by
  sid: order_by
  start: order_by
  trad_end: order_by
  trad_start: order_by
}

scalar exon_type

"""
Boolean expression to compare columns of type "exon_type". All fields are combined with logical 'AND'.
"""
input exon_type_comparison_exp {
  _eq: exon_type
  _gt: exon_type
  _gte: exon_type
  _in: [exon_type!]
  _is_null: Boolean
  _lt: exon_type
  _lte: exon_type
  _neq: exon_type
  _nin: [exon_type!]
}

"""
update columns of table "exon"
"""
enum exon_update_column {
  """column name"""
  attributes

  """column name"""
  chromosome

  """column name"""
  end

  """column name"""
  exon_number

  """column name"""
  exon_type

  """column name"""
  is_forward_strand

  """column name"""
  provider_code

  """column name"""
  sid

  """column name"""
  start

  """column name"""
  trad_end

  """column name"""
  trad_start

  """column name"""
  transcript_uid

  """column name"""
  uid
}

input exon_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: exon_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: exon_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: exon_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: exon_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: exon_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: exon_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: exon_set_input

  """filter the rows which have to be updated"""
  where: exon_bool_exp!
}

"""aggregate var_pop on columns"""
type exon_var_pop_fields {
  end: Float
  exon_number: Float
  sid: Float
  start: Float
  trad_end: Float
  trad_start: Float
}

"""
order by var_pop() on columns of table "exon"
"""
input exon_var_pop_order_by {
  end: order_by
  exon_number: order_by
  sid: order_by
  start: order_by
  trad_end: order_by
  trad_start: order_by
}

"""aggregate var_samp on columns"""
type exon_var_samp_fields {
  end: Float
  exon_number: Float
  sid: Float
  start: Float
  trad_end: Float
  trad_start: Float
}

"""
order by var_samp() on columns of table "exon"
"""
input exon_var_samp_order_by {
  end: order_by
  exon_number: order_by
  sid: order_by
  start: order_by
  trad_end: order_by
  trad_start: order_by
}

"""aggregate variance on columns"""
type exon_variance_fields {
  end: Float
  exon_number: Float
  sid: Float
  start: Float
  trad_end: Float
  trad_start: Float
}

"""
order by variance() on columns of table "exon"
"""
input exon_variance_order_by {
  end: order_by
  exon_number: order_by
  sid: order_by
  start: order_by
  trad_end: order_by
  trad_start: order_by
}

scalar float8

"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

"""
columns and relationships of "gene"
"""
type gene {
  acc_num_base: String
  acc_num_full: String
  acc_num_version: String
  annotation_ranges: int4multirange
  attributes(
    """JSON select path"""
    path: String
  ): jsonb
  chromosome: chromosome
  end: Int!
  hgnc_id: String

  """An object relationship"""
  hugo_mv: hugo_mv
  is_forward_strand: Boolean

  """An object relationship"""
  provider: provider!
  provider_code: String!
  sid: Int!
  start: Int!

  """An array relationship"""
  transcripts(
    """distinct select on columns"""
    distinct_on: [transcript_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transcript_order_by!]

    """filter the rows returned"""
    where: transcript_bool_exp
  ): [transcript!]!

  """An aggregate relationship"""
  transcripts_aggregate(
    """distinct select on columns"""
    distinct_on: [transcript_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transcript_order_by!]

    """filter the rows returned"""
    where: transcript_bool_exp
  ): transcript_aggregate!
  uid: uuid
}

"""
aggregated selection of "gene"
"""
type gene_aggregate {
  aggregate: gene_aggregate_fields
  nodes: [gene!]!
}

"""
aggregate fields of "gene"
"""
type gene_aggregate_fields {
  avg: gene_avg_fields
  count(columns: [gene_select_column!], distinct: Boolean): Int!
  max: gene_max_fields
  min: gene_min_fields
  stddev: gene_stddev_fields
  stddev_pop: gene_stddev_pop_fields
  stddev_samp: gene_stddev_samp_fields
  sum: gene_sum_fields
  var_pop: gene_var_pop_fields
  var_samp: gene_var_samp_fields
  variance: gene_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input gene_append_input {
  attributes: jsonb
}

"""aggregate avg on columns"""
type gene_avg_fields {
  end: Float
  sid: Float
  start: Float
}

"""
Boolean expression to filter rows from the table "gene". All fields are combined with a logical 'AND'.
"""
input gene_bool_exp {
  _and: [gene_bool_exp!]
  _not: gene_bool_exp
  _or: [gene_bool_exp!]
  acc_num_base: String_comparison_exp
  acc_num_full: String_comparison_exp
  acc_num_version: String_comparison_exp
  annotation_ranges: int4multirange_comparison_exp
  attributes: jsonb_comparison_exp
  chromosome: chromosome_comparison_exp
  end: Int_comparison_exp
  hgnc_id: String_comparison_exp
  hugo_mv: hugo_mv_bool_exp
  is_forward_strand: Boolean_comparison_exp
  provider: provider_bool_exp
  provider_code: String_comparison_exp
  sid: Int_comparison_exp
  start: Int_comparison_exp
  transcripts: transcript_bool_exp
  transcripts_aggregate: transcript_aggregate_bool_exp
  uid: uuid_comparison_exp
}

"""
unique or primary key constraints on table "gene"
"""
enum gene_constraint {
  """
  unique or primary key constraint on columns "sid"
  """
  gene_pkey

  """
  unique or primary key constraint on columns "uid"
  """
  gene_uid_key
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input gene_delete_at_path_input {
  attributes: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input gene_delete_elem_input {
  attributes: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input gene_delete_key_input {
  attributes: String
}

"""
input type for incrementing numeric columns in table "gene"
"""
input gene_inc_input {
  end: Int
  sid: Int
  start: Int
}

"""
input type for inserting data into table "gene"
"""
input gene_insert_input {
  acc_num_base: String
  acc_num_full: String
  acc_num_version: String
  annotation_ranges: int4multirange
  attributes: jsonb
  chromosome: chromosome
  end: Int
  hgnc_id: String
  hugo_mv: hugo_mv_obj_rel_insert_input
  is_forward_strand: Boolean
  provider: provider_obj_rel_insert_input
  provider_code: String
  sid: Int
  start: Int
  transcripts: transcript_arr_rel_insert_input
  uid: uuid
}

"""aggregate max on columns"""
type gene_max_fields {
  acc_num_base: String
  acc_num_full: String
  acc_num_version: String
  chromosome: chromosome
  end: Int
  hgnc_id: String
  provider_code: String
  sid: Int
  start: Int
  uid: uuid
}

"""aggregate min on columns"""
type gene_min_fields {
  acc_num_base: String
  acc_num_full: String
  acc_num_version: String
  chromosome: chromosome
  end: Int
  hgnc_id: String
  provider_code: String
  sid: Int
  start: Int
  uid: uuid
}

"""
response of any mutation on the table "gene"
"""
type gene_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [gene!]!
}

"""
input type for inserting object relation for remote table "gene"
"""
input gene_obj_rel_insert_input {
  data: gene_insert_input!

  """upsert condition"""
  on_conflict: gene_on_conflict
}

"""
on_conflict condition type for table "gene"
"""
input gene_on_conflict {
  constraint: gene_constraint!
  update_columns: [gene_update_column!]! = []
  where: gene_bool_exp
}

"""Ordering options when selecting data from "gene"."""
input gene_order_by {
  acc_num_base: order_by
  acc_num_full: order_by
  acc_num_version: order_by
  annotation_ranges: order_by
  attributes: order_by
  chromosome: order_by
  end: order_by
  hgnc_id: order_by
  hugo_mv: hugo_mv_order_by
  is_forward_strand: order_by
  provider: provider_order_by
  provider_code: order_by
  sid: order_by
  start: order_by
  transcripts_aggregate: transcript_aggregate_order_by
  uid: order_by
}

"""primary key columns input for table: gene"""
input gene_pk_columns_input {
  sid: Int!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input gene_prepend_input {
  attributes: jsonb
}

"""
select columns of table "gene"
"""
enum gene_select_column {
  """column name"""
  acc_num_base

  """column name"""
  acc_num_full

  """column name"""
  acc_num_version

  """column name"""
  annotation_ranges

  """column name"""
  attributes

  """column name"""
  chromosome

  """column name"""
  end

  """column name"""
  hgnc_id

  """column name"""
  is_forward_strand

  """column name"""
  provider_code

  """column name"""
  sid

  """column name"""
  start

  """column name"""
  uid
}

"""
input type for updating data in table "gene"
"""
input gene_set_input {
  acc_num_base: String
  acc_num_full: String
  acc_num_version: String
  annotation_ranges: int4multirange
  attributes: jsonb
  chromosome: chromosome
  end: Int
  hgnc_id: String
  is_forward_strand: Boolean
  provider_code: String
  sid: Int
  start: Int
  uid: uuid
}

"""aggregate stddev on columns"""
type gene_stddev_fields {
  end: Float
  sid: Float
  start: Float
}

"""aggregate stddev_pop on columns"""
type gene_stddev_pop_fields {
  end: Float
  sid: Float
  start: Float
}

"""aggregate stddev_samp on columns"""
type gene_stddev_samp_fields {
  end: Float
  sid: Float
  start: Float
}

"""
Streaming cursor of the table "gene"
"""
input gene_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: gene_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input gene_stream_cursor_value_input {
  acc_num_base: String
  acc_num_full: String
  acc_num_version: String
  annotation_ranges: int4multirange
  attributes: jsonb
  chromosome: chromosome
  end: Int
  hgnc_id: String
  is_forward_strand: Boolean
  provider_code: String
  sid: Int
  start: Int
  uid: uuid
}

"""aggregate sum on columns"""
type gene_sum_fields {
  end: Int
  sid: Int
  start: Int
}

"""
update columns of table "gene"
"""
enum gene_update_column {
  """column name"""
  acc_num_base

  """column name"""
  acc_num_full

  """column name"""
  acc_num_version

  """column name"""
  annotation_ranges

  """column name"""
  attributes

  """column name"""
  chromosome

  """column name"""
  end

  """column name"""
  hgnc_id

  """column name"""
  is_forward_strand

  """column name"""
  provider_code

  """column name"""
  sid

  """column name"""
  start

  """column name"""
  uid
}

input gene_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: gene_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: gene_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: gene_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: gene_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: gene_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: gene_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: gene_set_input

  """filter the rows which have to be updated"""
  where: gene_bool_exp!
}

"""aggregate var_pop on columns"""
type gene_var_pop_fields {
  end: Float
  sid: Float
  start: Float
}

"""aggregate var_samp on columns"""
type gene_var_samp_fields {
  end: Float
  sid: Float
  start: Float
}

"""aggregate variance on columns"""
type gene_variance_fields {
  end: Float
  sid: Float
  start: Float
}

"""
columns and relationships of "hugo_mv"
"""
type hugo_mv {
  all_symbols: [String!]
  approved_symbol: String
  hgnc_id: String
  other_symbols: [String!]
  previous_symbols: [String!]
  provider_code: String
}

"""
aggregated selection of "hugo_mv"
"""
type hugo_mv_aggregate {
  aggregate: hugo_mv_aggregate_fields
  nodes: [hugo_mv!]!
}

"""
aggregate fields of "hugo_mv"
"""
type hugo_mv_aggregate_fields {
  count(columns: [hugo_mv_select_column!], distinct: Boolean): Int!
  max: hugo_mv_max_fields
  min: hugo_mv_min_fields
}

"""
Boolean expression to filter rows from the table "hugo_mv". All fields are combined with a logical 'AND'.
"""
input hugo_mv_bool_exp {
  _and: [hugo_mv_bool_exp!]
  _not: hugo_mv_bool_exp
  _or: [hugo_mv_bool_exp!]
  all_symbols: String_array_comparison_exp
  approved_symbol: String_comparison_exp
  hgnc_id: String_comparison_exp
  other_symbols: String_array_comparison_exp
  previous_symbols: String_array_comparison_exp
  provider_code: String_comparison_exp
}

"""
unique or primary key constraints on table "hugo_mv"
"""
enum hugo_mv_constraint {
  """
  unique or primary key constraint on columns "hgnc_id"
  """
  hugo_mv_idx
}

"""
input type for inserting data into table "hugo_mv"
"""
input hugo_mv_insert_input {
  all_symbols: [String!]
  approved_symbol: String
  hgnc_id: String
  other_symbols: [String!]
  previous_symbols: [String!]
  provider_code: String
}

"""aggregate max on columns"""
type hugo_mv_max_fields {
  all_symbols: [String!]
  approved_symbol: String
  hgnc_id: String
  other_symbols: [String!]
  previous_symbols: [String!]
  provider_code: String
}

"""aggregate min on columns"""
type hugo_mv_min_fields {
  all_symbols: [String!]
  approved_symbol: String
  hgnc_id: String
  other_symbols: [String!]
  previous_symbols: [String!]
  provider_code: String
}

"""
input type for inserting object relation for remote table "hugo_mv"
"""
input hugo_mv_obj_rel_insert_input {
  data: hugo_mv_insert_input!

  """upsert condition"""
  on_conflict: hugo_mv_on_conflict
}

"""
on_conflict condition type for table "hugo_mv"
"""
input hugo_mv_on_conflict {
  constraint: hugo_mv_constraint!
  update_columns: [hugo_mv_update_column!]! = []
  where: hugo_mv_bool_exp
}

"""Ordering options when selecting data from "hugo_mv"."""
input hugo_mv_order_by {
  all_symbols: order_by
  approved_symbol: order_by
  hgnc_id: order_by
  other_symbols: order_by
  previous_symbols: order_by
  provider_code: order_by
}

"""
select columns of table "hugo_mv"
"""
enum hugo_mv_select_column {
  """column name"""
  all_symbols

  """column name"""
  approved_symbol

  """column name"""
  hgnc_id

  """column name"""
  other_symbols

  """column name"""
  previous_symbols

  """column name"""
  provider_code
}

"""
Streaming cursor of the table "hugo_mv"
"""
input hugo_mv_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: hugo_mv_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input hugo_mv_stream_cursor_value_input {
  all_symbols: [String!]
  approved_symbol: String
  hgnc_id: String
  other_symbols: [String!]
  previous_symbols: [String!]
  provider_code: String
}

"""
update columns of table "hugo_mv"
"""
enum hugo_mv_update_column {
  """column name"""
  all_symbols

  """column name"""
  approved_symbol

  """column name"""
  hgnc_id

  """column name"""
  other_symbols

  """column name"""
  previous_symbols

  """column name"""
  provider_code
}

"""
columns and relationships of "impact"
"""
type impact {
  """An object relationship"""
  appris_mv: appris_mv
  c_type: String
  created_at: timestamptz
  created_by: String
  feature_number: String
  feature_type: String

  """An object relationship"""
  gene: gene
  hgnc_id: String
  hgvsc: String
  hgvsgs: String
  hgvsp_long: String
  hgvsp_short: String

  """An object relationship"""
  main_impact: main_impact

  """An object relationship"""
  mane_mv: mane_mv
  p_type: String
  protein_refseq: String

  """An object relationship"""
  provider: provider
  provider_code: String!
  reference_genome: reference_genome!
  score: Int
  sid: Int!

  """An object relationship"""
  transcript: transcript
  transcript_refseq: String
  uid: uuid
  updated_at: timestamptz
  updated_by: String

  """An object relationship"""
  variant: variant
  variant_key: String!
}

"""
aggregated selection of "impact"
"""
type impact_aggregate {
  aggregate: impact_aggregate_fields
  nodes: [impact!]!
}

input impact_aggregate_bool_exp {
  count: impact_aggregate_bool_exp_count
}

input impact_aggregate_bool_exp_count {
  arguments: [impact_select_column!]
  distinct: Boolean
  filter: impact_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "impact"
"""
type impact_aggregate_fields {
  avg: impact_avg_fields
  count(columns: [impact_select_column!], distinct: Boolean): Int!
  max: impact_max_fields
  min: impact_min_fields
  stddev: impact_stddev_fields
  stddev_pop: impact_stddev_pop_fields
  stddev_samp: impact_stddev_samp_fields
  sum: impact_sum_fields
  var_pop: impact_var_pop_fields
  var_samp: impact_var_samp_fields
  variance: impact_variance_fields
}

"""
order by aggregate values of table "impact"
"""
input impact_aggregate_order_by {
  avg: impact_avg_order_by
  count: order_by
  max: impact_max_order_by
  min: impact_min_order_by
  stddev: impact_stddev_order_by
  stddev_pop: impact_stddev_pop_order_by
  stddev_samp: impact_stddev_samp_order_by
  sum: impact_sum_order_by
  var_pop: impact_var_pop_order_by
  var_samp: impact_var_samp_order_by
  variance: impact_variance_order_by
}

"""
input type for inserting array relation for remote table "impact"
"""
input impact_arr_rel_insert_input {
  data: [impact_insert_input!]!

  """upsert condition"""
  on_conflict: impact_on_conflict
}

"""aggregate avg on columns"""
type impact_avg_fields {
  score: Float
  sid: Float
}

"""
order by avg() on columns of table "impact"
"""
input impact_avg_order_by {
  score: order_by
  sid: order_by
}

"""
Boolean expression to filter rows from the table "impact". All fields are combined with a logical 'AND'.
"""
input impact_bool_exp {
  _and: [impact_bool_exp!]
  _not: impact_bool_exp
  _or: [impact_bool_exp!]
  appris_mv: appris_mv_bool_exp
  c_type: String_comparison_exp
  created_at: timestamptz_comparison_exp
  created_by: String_comparison_exp
  feature_number: String_comparison_exp
  feature_type: String_comparison_exp
  gene: gene_bool_exp
  hgnc_id: String_comparison_exp
  hgvsc: String_comparison_exp
  hgvsgs: String_comparison_exp
  hgvsp_long: String_comparison_exp
  hgvsp_short: String_comparison_exp
  main_impact: main_impact_bool_exp
  mane_mv: mane_mv_bool_exp
  p_type: String_comparison_exp
  protein_refseq: String_comparison_exp
  provider: provider_bool_exp
  provider_code: String_comparison_exp
  reference_genome: reference_genome_comparison_exp
  score: Int_comparison_exp
  sid: Int_comparison_exp
  transcript: transcript_bool_exp
  transcript_refseq: String_comparison_exp
  uid: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
  updated_by: String_comparison_exp
  variant: variant_bool_exp
  variant_key: String_comparison_exp
}

"""
unique or primary key constraints on table "impact"
"""
enum impact_constraint {
  """
  unique or primary key constraint on columns "sid"
  """
  impact_pkey

  """
  unique or primary key constraint on columns "uid"
  """
  impact_uid_key

  """
  unique or primary key constraint on columns "provider_code", "hgvsgs"
  """
  impact_variant_transcript_provider_idx
}

"""
input type for incrementing numeric columns in table "impact"
"""
input impact_inc_input {
  score: Int
  sid: Int
}

"""
input type for inserting data into table "impact"
"""
input impact_insert_input {
  appris_mv: appris_mv_obj_rel_insert_input
  c_type: String
  created_at: timestamptz
  created_by: String
  feature_number: String
  feature_type: String
  gene: gene_obj_rel_insert_input
  hgnc_id: String
  hgvsc: String
  hgvsgs: String
  hgvsp_long: String
  hgvsp_short: String
  main_impact: main_impact_obj_rel_insert_input
  mane_mv: mane_mv_obj_rel_insert_input
  p_type: String
  protein_refseq: String
  provider: provider_obj_rel_insert_input
  provider_code: String
  reference_genome: reference_genome
  score: Int
  sid: Int
  transcript: transcript_obj_rel_insert_input
  transcript_refseq: String
  uid: uuid
  updated_at: timestamptz
  updated_by: String
  variant: variant_obj_rel_insert_input
  variant_key: String
}

"""aggregate max on columns"""
type impact_max_fields {
  c_type: String
  created_at: timestamptz
  created_by: String
  feature_number: String
  feature_type: String
  hgnc_id: String
  hgvsc: String
  hgvsgs: String
  hgvsp_long: String
  hgvsp_short: String
  p_type: String
  protein_refseq: String
  provider_code: String
  reference_genome: reference_genome
  score: Int
  sid: Int
  transcript_refseq: String
  uid: uuid
  updated_at: timestamptz
  updated_by: String
  variant_key: String
}

"""
order by max() on columns of table "impact"
"""
input impact_max_order_by {
  c_type: order_by
  created_at: order_by
  created_by: order_by
  feature_number: order_by
  feature_type: order_by
  hgnc_id: order_by
  hgvsc: order_by
  hgvsgs: order_by
  hgvsp_long: order_by
  hgvsp_short: order_by
  p_type: order_by
  protein_refseq: order_by
  provider_code: order_by
  reference_genome: order_by
  score: order_by
  sid: order_by
  transcript_refseq: order_by
  uid: order_by
  updated_at: order_by
  updated_by: order_by
  variant_key: order_by
}

"""aggregate min on columns"""
type impact_min_fields {
  c_type: String
  created_at: timestamptz
  created_by: String
  feature_number: String
  feature_type: String
  hgnc_id: String
  hgvsc: String
  hgvsgs: String
  hgvsp_long: String
  hgvsp_short: String
  p_type: String
  protein_refseq: String
  provider_code: String
  reference_genome: reference_genome
  score: Int
  sid: Int
  transcript_refseq: String
  uid: uuid
  updated_at: timestamptz
  updated_by: String
  variant_key: String
}

"""
order by min() on columns of table "impact"
"""
input impact_min_order_by {
  c_type: order_by
  created_at: order_by
  created_by: order_by
  feature_number: order_by
  feature_type: order_by
  hgnc_id: order_by
  hgvsc: order_by
  hgvsgs: order_by
  hgvsp_long: order_by
  hgvsp_short: order_by
  p_type: order_by
  protein_refseq: order_by
  provider_code: order_by
  reference_genome: order_by
  score: order_by
  sid: order_by
  transcript_refseq: order_by
  uid: order_by
  updated_at: order_by
  updated_by: order_by
  variant_key: order_by
}

"""
response of any mutation on the table "impact"
"""
type impact_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [impact!]!
}

"""
on_conflict condition type for table "impact"
"""
input impact_on_conflict {
  constraint: impact_constraint!
  update_columns: [impact_update_column!]! = []
  where: impact_bool_exp
}

"""Ordering options when selecting data from "impact"."""
input impact_order_by {
  appris_mv: appris_mv_order_by
  c_type: order_by
  created_at: order_by
  created_by: order_by
  feature_number: order_by
  feature_type: order_by
  gene: gene_order_by
  hgnc_id: order_by
  hgvsc: order_by
  hgvsgs: order_by
  hgvsp_long: order_by
  hgvsp_short: order_by
  main_impact: main_impact_order_by
  mane_mv: mane_mv_order_by
  p_type: order_by
  protein_refseq: order_by
  provider: provider_order_by
  provider_code: order_by
  reference_genome: order_by
  score: order_by
  sid: order_by
  transcript: transcript_order_by
  transcript_refseq: order_by
  uid: order_by
  updated_at: order_by
  updated_by: order_by
  variant: variant_order_by
  variant_key: order_by
}

"""primary key columns input for table: impact"""
input impact_pk_columns_input {
  sid: Int!
}

"""
select columns of table "impact"
"""
enum impact_select_column {
  """column name"""
  c_type

  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  feature_number

  """column name"""
  feature_type

  """column name"""
  hgnc_id

  """column name"""
  hgvsc

  """column name"""
  hgvsgs

  """column name"""
  hgvsp_long

  """column name"""
  hgvsp_short

  """column name"""
  p_type

  """column name"""
  protein_refseq

  """column name"""
  provider_code

  """column name"""
  reference_genome

  """column name"""
  score

  """column name"""
  sid

  """column name"""
  transcript_refseq

  """column name"""
  uid

  """column name"""
  updated_at

  """column name"""
  updated_by

  """column name"""
  variant_key
}

"""
input type for updating data in table "impact"
"""
input impact_set_input {
  c_type: String
  created_at: timestamptz
  created_by: String
  feature_number: String
  feature_type: String
  hgnc_id: String
  hgvsc: String
  hgvsgs: String
  hgvsp_long: String
  hgvsp_short: String
  p_type: String
  protein_refseq: String
  provider_code: String
  reference_genome: reference_genome
  score: Int
  sid: Int
  transcript_refseq: String
  uid: uuid
  updated_at: timestamptz
  updated_by: String
  variant_key: String
}

"""aggregate stddev on columns"""
type impact_stddev_fields {
  score: Float
  sid: Float
}

"""
order by stddev() on columns of table "impact"
"""
input impact_stddev_order_by {
  score: order_by
  sid: order_by
}

"""aggregate stddev_pop on columns"""
type impact_stddev_pop_fields {
  score: Float
  sid: Float
}

"""
order by stddev_pop() on columns of table "impact"
"""
input impact_stddev_pop_order_by {
  score: order_by
  sid: order_by
}

"""aggregate stddev_samp on columns"""
type impact_stddev_samp_fields {
  score: Float
  sid: Float
}

"""
order by stddev_samp() on columns of table "impact"
"""
input impact_stddev_samp_order_by {
  score: order_by
  sid: order_by
}

"""
Streaming cursor of the table "impact"
"""
input impact_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: impact_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input impact_stream_cursor_value_input {
  c_type: String
  created_at: timestamptz
  created_by: String
  feature_number: String
  feature_type: String
  hgnc_id: String
  hgvsc: String
  hgvsgs: String
  hgvsp_long: String
  hgvsp_short: String
  p_type: String
  protein_refseq: String
  provider_code: String
  reference_genome: reference_genome
  score: Int
  sid: Int
  transcript_refseq: String
  uid: uuid
  updated_at: timestamptz
  updated_by: String
  variant_key: String
}

"""aggregate sum on columns"""
type impact_sum_fields {
  score: Int
  sid: Int
}

"""
order by sum() on columns of table "impact"
"""
input impact_sum_order_by {
  score: order_by
  sid: order_by
}

"""
update columns of table "impact"
"""
enum impact_update_column {
  """column name"""
  c_type

  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  feature_number

  """column name"""
  feature_type

  """column name"""
  hgnc_id

  """column name"""
  hgvsc

  """column name"""
  hgvsgs

  """column name"""
  hgvsp_long

  """column name"""
  hgvsp_short

  """column name"""
  p_type

  """column name"""
  protein_refseq

  """column name"""
  provider_code

  """column name"""
  reference_genome

  """column name"""
  score

  """column name"""
  sid

  """column name"""
  transcript_refseq

  """column name"""
  uid

  """column name"""
  updated_at

  """column name"""
  updated_by

  """column name"""
  variant_key
}

input impact_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: impact_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: impact_set_input

  """filter the rows which have to be updated"""
  where: impact_bool_exp!
}

"""aggregate var_pop on columns"""
type impact_var_pop_fields {
  score: Float
  sid: Float
}

"""
order by var_pop() on columns of table "impact"
"""
input impact_var_pop_order_by {
  score: order_by
  sid: order_by
}

"""aggregate var_samp on columns"""
type impact_var_samp_fields {
  score: Float
  sid: Float
}

"""
order by var_samp() on columns of table "impact"
"""
input impact_var_samp_order_by {
  score: order_by
  sid: order_by
}

"""aggregate variance on columns"""
type impact_variance_fields {
  score: Float
  sid: Float
}

"""
order by variance() on columns of table "impact"
"""
input impact_variance_order_by {
  score: order_by
  sid: order_by
}

scalar int4multirange

"""
Boolean expression to compare columns of type "int4multirange". All fields are combined with logical 'AND'.
"""
input int4multirange_comparison_exp {
  _eq: int4multirange
  _gt: int4multirange
  _gte: int4multirange
  _in: [int4multirange!]
  _is_null: Boolean
  _lt: int4multirange
  _lte: int4multirange
  _neq: int4multirange
  _nin: [int4multirange!]
}

scalar int4range

"""
Boolean expression to compare columns of type "int4range". All fields are combined with logical 'AND'.
"""
input int4range_comparison_exp {
  _eq: int4range
  _gt: int4range
  _gte: int4range
  _in: [int4range!]
  _is_null: Boolean
  _lt: int4range
  _lte: int4range
  _neq: int4range
  _nin: [int4range!]
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""
columns and relationships of "main_impact"
"""
type main_impact {
  """An object relationship"""
  appris_mv: appris_mv
  c_type: String
  created_at: timestamptz
  created_by: String
  feature_number: String
  feature_type: String

  """An object relationship"""
  gene: gene
  hgnc_id: String
  hgvsc: String
  hgvsgs: String
  hgvsp_long: String
  hgvsp_short: String

  """An object relationship"""
  mane_mv: mane_mv
  p_type: String
  protein_refseq: String

  """An object relationship"""
  provider: provider
  provider_code: String!
  reference_genome: reference_genome!
  score: Int
  sid: Int!

  """An object relationship"""
  transcript: transcript
  transcript_refseq: String
  uid: uuid
  updated_at: timestamptz
  updated_by: String

  """An object relationship"""
  variant: variant
  variant_key: String!
}

"""
aggregated selection of "main_impact"
"""
type main_impact_aggregate {
  aggregate: main_impact_aggregate_fields
  nodes: [main_impact!]!
}

input main_impact_aggregate_bool_exp {
  count: main_impact_aggregate_bool_exp_count
}

input main_impact_aggregate_bool_exp_count {
  arguments: [main_impact_select_column!]
  distinct: Boolean
  filter: main_impact_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "main_impact"
"""
type main_impact_aggregate_fields {
  avg: main_impact_avg_fields
  count(columns: [main_impact_select_column!], distinct: Boolean): Int!
  max: main_impact_max_fields
  min: main_impact_min_fields
  stddev: main_impact_stddev_fields
  stddev_pop: main_impact_stddev_pop_fields
  stddev_samp: main_impact_stddev_samp_fields
  sum: main_impact_sum_fields
  var_pop: main_impact_var_pop_fields
  var_samp: main_impact_var_samp_fields
  variance: main_impact_variance_fields
}

"""
order by aggregate values of table "main_impact"
"""
input main_impact_aggregate_order_by {
  avg: main_impact_avg_order_by
  count: order_by
  max: main_impact_max_order_by
  min: main_impact_min_order_by
  stddev: main_impact_stddev_order_by
  stddev_pop: main_impact_stddev_pop_order_by
  stddev_samp: main_impact_stddev_samp_order_by
  sum: main_impact_sum_order_by
  var_pop: main_impact_var_pop_order_by
  var_samp: main_impact_var_samp_order_by
  variance: main_impact_variance_order_by
}

"""
input type for inserting array relation for remote table "main_impact"
"""
input main_impact_arr_rel_insert_input {
  data: [main_impact_insert_input!]!

  """upsert condition"""
  on_conflict: main_impact_on_conflict
}

"""aggregate avg on columns"""
type main_impact_avg_fields {
  score: Float
  sid: Float
}

"""
order by avg() on columns of table "main_impact"
"""
input main_impact_avg_order_by {
  score: order_by
  sid: order_by
}

"""
Boolean expression to filter rows from the table "main_impact". All fields are combined with a logical 'AND'.
"""
input main_impact_bool_exp {
  _and: [main_impact_bool_exp!]
  _not: main_impact_bool_exp
  _or: [main_impact_bool_exp!]
  appris_mv: appris_mv_bool_exp
  c_type: String_comparison_exp
  created_at: timestamptz_comparison_exp
  created_by: String_comparison_exp
  feature_number: String_comparison_exp
  feature_type: String_comparison_exp
  gene: gene_bool_exp
  hgnc_id: String_comparison_exp
  hgvsc: String_comparison_exp
  hgvsgs: String_comparison_exp
  hgvsp_long: String_comparison_exp
  hgvsp_short: String_comparison_exp
  mane_mv: mane_mv_bool_exp
  p_type: String_comparison_exp
  protein_refseq: String_comparison_exp
  provider: provider_bool_exp
  provider_code: String_comparison_exp
  reference_genome: reference_genome_comparison_exp
  score: Int_comparison_exp
  sid: Int_comparison_exp
  transcript: transcript_bool_exp
  transcript_refseq: String_comparison_exp
  uid: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
  updated_by: String_comparison_exp
  variant: variant_bool_exp
  variant_key: String_comparison_exp
}

"""
unique or primary key constraints on table "main_impact"
"""
enum main_impact_constraint {
  """
  unique or primary key constraint on columns "sid"
  """
  main_impact_pkey

  """
  unique or primary key constraint on columns "uid"
  """
  main_impact_uid_key

  """
  unique or primary key constraint on columns "provider_code", "hgvsgs"
  """
  main_impact_variant_transcript_provider_idx
}

"""
input type for incrementing numeric columns in table "main_impact"
"""
input main_impact_inc_input {
  score: Int
  sid: Int
}

"""
input type for inserting data into table "main_impact"
"""
input main_impact_insert_input {
  appris_mv: appris_mv_obj_rel_insert_input
  c_type: String
  created_at: timestamptz
  created_by: String
  feature_number: String
  feature_type: String
  gene: gene_obj_rel_insert_input
  hgnc_id: String
  hgvsc: String
  hgvsgs: String
  hgvsp_long: String
  hgvsp_short: String
  mane_mv: mane_mv_obj_rel_insert_input
  p_type: String
  protein_refseq: String
  provider: provider_obj_rel_insert_input
  provider_code: String
  reference_genome: reference_genome
  score: Int
  sid: Int
  transcript: transcript_obj_rel_insert_input
  transcript_refseq: String
  uid: uuid
  updated_at: timestamptz
  updated_by: String
  variant: variant_obj_rel_insert_input
  variant_key: String
}

"""aggregate max on columns"""
type main_impact_max_fields {
  c_type: String
  created_at: timestamptz
  created_by: String
  feature_number: String
  feature_type: String
  hgnc_id: String
  hgvsc: String
  hgvsgs: String
  hgvsp_long: String
  hgvsp_short: String
  p_type: String
  protein_refseq: String
  provider_code: String
  reference_genome: reference_genome
  score: Int
  sid: Int
  transcript_refseq: String
  uid: uuid
  updated_at: timestamptz
  updated_by: String
  variant_key: String
}

"""
order by max() on columns of table "main_impact"
"""
input main_impact_max_order_by {
  c_type: order_by
  created_at: order_by
  created_by: order_by
  feature_number: order_by
  feature_type: order_by
  hgnc_id: order_by
  hgvsc: order_by
  hgvsgs: order_by
  hgvsp_long: order_by
  hgvsp_short: order_by
  p_type: order_by
  protein_refseq: order_by
  provider_code: order_by
  reference_genome: order_by
  score: order_by
  sid: order_by
  transcript_refseq: order_by
  uid: order_by
  updated_at: order_by
  updated_by: order_by
  variant_key: order_by
}

"""aggregate min on columns"""
type main_impact_min_fields {
  c_type: String
  created_at: timestamptz
  created_by: String
  feature_number: String
  feature_type: String
  hgnc_id: String
  hgvsc: String
  hgvsgs: String
  hgvsp_long: String
  hgvsp_short: String
  p_type: String
  protein_refseq: String
  provider_code: String
  reference_genome: reference_genome
  score: Int
  sid: Int
  transcript_refseq: String
  uid: uuid
  updated_at: timestamptz
  updated_by: String
  variant_key: String
}

"""
order by min() on columns of table "main_impact"
"""
input main_impact_min_order_by {
  c_type: order_by
  created_at: order_by
  created_by: order_by
  feature_number: order_by
  feature_type: order_by
  hgnc_id: order_by
  hgvsc: order_by
  hgvsgs: order_by
  hgvsp_long: order_by
  hgvsp_short: order_by
  p_type: order_by
  protein_refseq: order_by
  provider_code: order_by
  reference_genome: order_by
  score: order_by
  sid: order_by
  transcript_refseq: order_by
  uid: order_by
  updated_at: order_by
  updated_by: order_by
  variant_key: order_by
}

"""
response of any mutation on the table "main_impact"
"""
type main_impact_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [main_impact!]!
}

"""
input type for inserting object relation for remote table "main_impact"
"""
input main_impact_obj_rel_insert_input {
  data: main_impact_insert_input!

  """upsert condition"""
  on_conflict: main_impact_on_conflict
}

"""
on_conflict condition type for table "main_impact"
"""
input main_impact_on_conflict {
  constraint: main_impact_constraint!
  update_columns: [main_impact_update_column!]! = []
  where: main_impact_bool_exp
}

"""Ordering options when selecting data from "main_impact"."""
input main_impact_order_by {
  appris_mv: appris_mv_order_by
  c_type: order_by
  created_at: order_by
  created_by: order_by
  feature_number: order_by
  feature_type: order_by
  gene: gene_order_by
  hgnc_id: order_by
  hgvsc: order_by
  hgvsgs: order_by
  hgvsp_long: order_by
  hgvsp_short: order_by
  mane_mv: mane_mv_order_by
  p_type: order_by
  protein_refseq: order_by
  provider: provider_order_by
  provider_code: order_by
  reference_genome: order_by
  score: order_by
  sid: order_by
  transcript: transcript_order_by
  transcript_refseq: order_by
  uid: order_by
  updated_at: order_by
  updated_by: order_by
  variant: variant_order_by
  variant_key: order_by
}

"""primary key columns input for table: main_impact"""
input main_impact_pk_columns_input {
  sid: Int!
}

"""
select columns of table "main_impact"
"""
enum main_impact_select_column {
  """column name"""
  c_type

  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  feature_number

  """column name"""
  feature_type

  """column name"""
  hgnc_id

  """column name"""
  hgvsc

  """column name"""
  hgvsgs

  """column name"""
  hgvsp_long

  """column name"""
  hgvsp_short

  """column name"""
  p_type

  """column name"""
  protein_refseq

  """column name"""
  provider_code

  """column name"""
  reference_genome

  """column name"""
  score

  """column name"""
  sid

  """column name"""
  transcript_refseq

  """column name"""
  uid

  """column name"""
  updated_at

  """column name"""
  updated_by

  """column name"""
  variant_key
}

"""
input type for updating data in table "main_impact"
"""
input main_impact_set_input {
  c_type: String
  created_at: timestamptz
  created_by: String
  feature_number: String
  feature_type: String
  hgnc_id: String
  hgvsc: String
  hgvsgs: String
  hgvsp_long: String
  hgvsp_short: String
  p_type: String
  protein_refseq: String
  provider_code: String
  reference_genome: reference_genome
  score: Int
  sid: Int
  transcript_refseq: String
  uid: uuid
  updated_at: timestamptz
  updated_by: String
  variant_key: String
}

"""aggregate stddev on columns"""
type main_impact_stddev_fields {
  score: Float
  sid: Float
}

"""
order by stddev() on columns of table "main_impact"
"""
input main_impact_stddev_order_by {
  score: order_by
  sid: order_by
}

"""aggregate stddev_pop on columns"""
type main_impact_stddev_pop_fields {
  score: Float
  sid: Float
}

"""
order by stddev_pop() on columns of table "main_impact"
"""
input main_impact_stddev_pop_order_by {
  score: order_by
  sid: order_by
}

"""aggregate stddev_samp on columns"""
type main_impact_stddev_samp_fields {
  score: Float
  sid: Float
}

"""
order by stddev_samp() on columns of table "main_impact"
"""
input main_impact_stddev_samp_order_by {
  score: order_by
  sid: order_by
}

"""
Streaming cursor of the table "main_impact"
"""
input main_impact_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: main_impact_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input main_impact_stream_cursor_value_input {
  c_type: String
  created_at: timestamptz
  created_by: String
  feature_number: String
  feature_type: String
  hgnc_id: String
  hgvsc: String
  hgvsgs: String
  hgvsp_long: String
  hgvsp_short: String
  p_type: String
  protein_refseq: String
  provider_code: String
  reference_genome: reference_genome
  score: Int
  sid: Int
  transcript_refseq: String
  uid: uuid
  updated_at: timestamptz
  updated_by: String
  variant_key: String
}

"""aggregate sum on columns"""
type main_impact_sum_fields {
  score: Int
  sid: Int
}

"""
order by sum() on columns of table "main_impact"
"""
input main_impact_sum_order_by {
  score: order_by
  sid: order_by
}

"""
update columns of table "main_impact"
"""
enum main_impact_update_column {
  """column name"""
  c_type

  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  feature_number

  """column name"""
  feature_type

  """column name"""
  hgnc_id

  """column name"""
  hgvsc

  """column name"""
  hgvsgs

  """column name"""
  hgvsp_long

  """column name"""
  hgvsp_short

  """column name"""
  p_type

  """column name"""
  protein_refseq

  """column name"""
  provider_code

  """column name"""
  reference_genome

  """column name"""
  score

  """column name"""
  sid

  """column name"""
  transcript_refseq

  """column name"""
  uid

  """column name"""
  updated_at

  """column name"""
  updated_by

  """column name"""
  variant_key
}

input main_impact_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: main_impact_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: main_impact_set_input

  """filter the rows which have to be updated"""
  where: main_impact_bool_exp!
}

"""aggregate var_pop on columns"""
type main_impact_var_pop_fields {
  score: Float
  sid: Float
}

"""
order by var_pop() on columns of table "main_impact"
"""
input main_impact_var_pop_order_by {
  score: order_by
  sid: order_by
}

"""aggregate var_samp on columns"""
type main_impact_var_samp_fields {
  score: Float
  sid: Float
}

"""
order by var_samp() on columns of table "main_impact"
"""
input main_impact_var_samp_order_by {
  score: order_by
  sid: order_by
}

"""aggregate variance on columns"""
type main_impact_variance_fields {
  score: Float
  sid: Float
}

"""
order by variance() on columns of table "main_impact"
"""
input main_impact_variance_order_by {
  score: order_by
  sid: order_by
}

"""
columns and relationships of "mane_mv"
"""
type mane_mv {
  ensembl_gene_reference: String
  ensembl_protein_reference: String
  ensembl_transcript_reference: String
  hgnc_id: String
  ncbi_gene_reference: String
  ncbi_protein_reference: String
  ncbi_transcript_reference: String
  provider_code: String
  sid: Int
  status: String
  uid: uuid
}

"""
aggregated selection of "mane_mv"
"""
type mane_mv_aggregate {
  aggregate: mane_mv_aggregate_fields
  nodes: [mane_mv!]!
}

"""
aggregate fields of "mane_mv"
"""
type mane_mv_aggregate_fields {
  avg: mane_mv_avg_fields
  count(columns: [mane_mv_select_column!], distinct: Boolean): Int!
  max: mane_mv_max_fields
  min: mane_mv_min_fields
  stddev: mane_mv_stddev_fields
  stddev_pop: mane_mv_stddev_pop_fields
  stddev_samp: mane_mv_stddev_samp_fields
  sum: mane_mv_sum_fields
  var_pop: mane_mv_var_pop_fields
  var_samp: mane_mv_var_samp_fields
  variance: mane_mv_variance_fields
}

"""aggregate avg on columns"""
type mane_mv_avg_fields {
  sid: Float
}

"""
Boolean expression to filter rows from the table "mane_mv". All fields are combined with a logical 'AND'.
"""
input mane_mv_bool_exp {
  _and: [mane_mv_bool_exp!]
  _not: mane_mv_bool_exp
  _or: [mane_mv_bool_exp!]
  ensembl_gene_reference: String_comparison_exp
  ensembl_protein_reference: String_comparison_exp
  ensembl_transcript_reference: String_comparison_exp
  hgnc_id: String_comparison_exp
  ncbi_gene_reference: String_comparison_exp
  ncbi_protein_reference: String_comparison_exp
  ncbi_transcript_reference: String_comparison_exp
  provider_code: String_comparison_exp
  sid: Int_comparison_exp
  status: String_comparison_exp
  uid: uuid_comparison_exp
}

"""
unique or primary key constraints on table "mane_mv"
"""
enum mane_mv_constraint {
  """
  unique or primary key constraint on columns "uid"
  """
  mane_mv_uid
}

"""
input type for inserting data into table "mane_mv"
"""
input mane_mv_insert_input {
  ensembl_gene_reference: String
  ensembl_protein_reference: String
  ensembl_transcript_reference: String
  hgnc_id: String
  ncbi_gene_reference: String
  ncbi_protein_reference: String
  ncbi_transcript_reference: String
  provider_code: String
  sid: Int
  status: String
  uid: uuid
}

"""aggregate max on columns"""
type mane_mv_max_fields {
  ensembl_gene_reference: String
  ensembl_protein_reference: String
  ensembl_transcript_reference: String
  hgnc_id: String
  ncbi_gene_reference: String
  ncbi_protein_reference: String
  ncbi_transcript_reference: String
  provider_code: String
  sid: Int
  status: String
  uid: uuid
}

"""aggregate min on columns"""
type mane_mv_min_fields {
  ensembl_gene_reference: String
  ensembl_protein_reference: String
  ensembl_transcript_reference: String
  hgnc_id: String
  ncbi_gene_reference: String
  ncbi_protein_reference: String
  ncbi_transcript_reference: String
  provider_code: String
  sid: Int
  status: String
  uid: uuid
}

"""
input type for inserting object relation for remote table "mane_mv"
"""
input mane_mv_obj_rel_insert_input {
  data: mane_mv_insert_input!

  """upsert condition"""
  on_conflict: mane_mv_on_conflict
}

"""
on_conflict condition type for table "mane_mv"
"""
input mane_mv_on_conflict {
  constraint: mane_mv_constraint!
  update_columns: [mane_mv_update_column!]! = []
  where: mane_mv_bool_exp
}

"""Ordering options when selecting data from "mane_mv"."""
input mane_mv_order_by {
  ensembl_gene_reference: order_by
  ensembl_protein_reference: order_by
  ensembl_transcript_reference: order_by
  hgnc_id: order_by
  ncbi_gene_reference: order_by
  ncbi_protein_reference: order_by
  ncbi_transcript_reference: order_by
  provider_code: order_by
  sid: order_by
  status: order_by
  uid: order_by
}

"""
select columns of table "mane_mv"
"""
enum mane_mv_select_column {
  """column name"""
  ensembl_gene_reference

  """column name"""
  ensembl_protein_reference

  """column name"""
  ensembl_transcript_reference

  """column name"""
  hgnc_id

  """column name"""
  ncbi_gene_reference

  """column name"""
  ncbi_protein_reference

  """column name"""
  ncbi_transcript_reference

  """column name"""
  provider_code

  """column name"""
  sid

  """column name"""
  status

  """column name"""
  uid
}

"""aggregate stddev on columns"""
type mane_mv_stddev_fields {
  sid: Float
}

"""aggregate stddev_pop on columns"""
type mane_mv_stddev_pop_fields {
  sid: Float
}

"""aggregate stddev_samp on columns"""
type mane_mv_stddev_samp_fields {
  sid: Float
}

"""
Streaming cursor of the table "mane_mv"
"""
input mane_mv_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: mane_mv_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input mane_mv_stream_cursor_value_input {
  ensembl_gene_reference: String
  ensembl_protein_reference: String
  ensembl_transcript_reference: String
  hgnc_id: String
  ncbi_gene_reference: String
  ncbi_protein_reference: String
  ncbi_transcript_reference: String
  provider_code: String
  sid: Int
  status: String
  uid: uuid
}

"""aggregate sum on columns"""
type mane_mv_sum_fields {
  sid: Int
}

"""
update columns of table "mane_mv"
"""
enum mane_mv_update_column {
  """column name"""
  ensembl_gene_reference

  """column name"""
  ensembl_protein_reference

  """column name"""
  ensembl_transcript_reference

  """column name"""
  hgnc_id

  """column name"""
  ncbi_gene_reference

  """column name"""
  ncbi_protein_reference

  """column name"""
  ncbi_transcript_reference

  """column name"""
  provider_code

  """column name"""
  sid

  """column name"""
  status

  """column name"""
  uid
}

"""aggregate var_pop on columns"""
type mane_mv_var_pop_fields {
  sid: Float
}

"""aggregate var_samp on columns"""
type mane_mv_var_samp_fields {
  sid: Float
}

"""aggregate variance on columns"""
type mane_mv_variance_fields {
  sid: Float
}

"""
columns and relationships of "migration"
"""
type migration {
  created_at: timestamp
  filename: String!
  id: Int!
}

"""
aggregated selection of "migration"
"""
type migration_aggregate {
  aggregate: migration_aggregate_fields
  nodes: [migration!]!
}

"""
aggregate fields of "migration"
"""
type migration_aggregate_fields {
  avg: migration_avg_fields
  count(columns: [migration_select_column!], distinct: Boolean): Int!
  max: migration_max_fields
  min: migration_min_fields
  stddev: migration_stddev_fields
  stddev_pop: migration_stddev_pop_fields
  stddev_samp: migration_stddev_samp_fields
  sum: migration_sum_fields
  var_pop: migration_var_pop_fields
  var_samp: migration_var_samp_fields
  variance: migration_variance_fields
}

"""aggregate avg on columns"""
type migration_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "migration". All fields are combined with a logical 'AND'.
"""
input migration_bool_exp {
  _and: [migration_bool_exp!]
  _not: migration_bool_exp
  _or: [migration_bool_exp!]
  created_at: timestamp_comparison_exp
  filename: String_comparison_exp
  id: Int_comparison_exp
}

"""
unique or primary key constraints on table "migration"
"""
enum migration_constraint {
  """
  unique or primary key constraint on columns "filename"
  """
  migration_filename_key
}

"""
input type for incrementing numeric columns in table "migration"
"""
input migration_inc_input {
  id: Int
}

"""
input type for inserting data into table "migration"
"""
input migration_insert_input {
  created_at: timestamp
  filename: String
  id: Int
}

"""aggregate max on columns"""
type migration_max_fields {
  created_at: timestamp
  filename: String
  id: Int
}

"""aggregate min on columns"""
type migration_min_fields {
  created_at: timestamp
  filename: String
  id: Int
}

"""
response of any mutation on the table "migration"
"""
type migration_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [migration!]!
}

"""
on_conflict condition type for table "migration"
"""
input migration_on_conflict {
  constraint: migration_constraint!
  update_columns: [migration_update_column!]! = []
  where: migration_bool_exp
}

"""Ordering options when selecting data from "migration"."""
input migration_order_by {
  created_at: order_by
  filename: order_by
  id: order_by
}

"""
select columns of table "migration"
"""
enum migration_select_column {
  """column name"""
  created_at

  """column name"""
  filename

  """column name"""
  id
}

"""
input type for updating data in table "migration"
"""
input migration_set_input {
  created_at: timestamp
  filename: String
  id: Int
}

"""aggregate stddev on columns"""
type migration_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type migration_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type migration_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "migration"
"""
input migration_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: migration_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input migration_stream_cursor_value_input {
  created_at: timestamp
  filename: String
  id: Int
}

"""aggregate sum on columns"""
type migration_sum_fields {
  id: Int
}

"""
update columns of table "migration"
"""
enum migration_update_column {
  """column name"""
  created_at

  """column name"""
  filename

  """column name"""
  id
}

input migration_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: migration_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: migration_set_input

  """filter the rows which have to be updated"""
  where: migration_bool_exp!
}

"""aggregate var_pop on columns"""
type migration_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type migration_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type migration_variance_fields {
  id: Float
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "compermed_oncogene_ts"
  """
  delete_compermed_oncogene_ts(
    """filter the rows which have to be deleted"""
    where: compermed_oncogene_ts_bool_exp!
  ): compermed_oncogene_ts_mutation_response

  """
  delete single row from the table: "compermed_oncogene_ts"
  """
  delete_compermed_oncogene_ts_by_pk(sid: Int!): compermed_oncogene_ts

  """
  delete data from the table: "exon"
  """
  delete_exon(
    """filter the rows which have to be deleted"""
    where: exon_bool_exp!
  ): exon_mutation_response

  """
  delete single row from the table: "exon"
  """
  delete_exon_by_pk(sid: Int!): exon

  """
  delete data from the table: "gene"
  """
  delete_gene(
    """filter the rows which have to be deleted"""
    where: gene_bool_exp!
  ): gene_mutation_response

  """
  delete single row from the table: "gene"
  """
  delete_gene_by_pk(sid: Int!): gene

  """
  delete data from the table: "impact"
  """
  delete_impact(
    """filter the rows which have to be deleted"""
    where: impact_bool_exp!
  ): impact_mutation_response

  """
  delete single row from the table: "impact"
  """
  delete_impact_by_pk(sid: Int!): impact

  """
  delete data from the table: "main_impact"
  """
  delete_main_impact(
    """filter the rows which have to be deleted"""
    where: main_impact_bool_exp!
  ): main_impact_mutation_response

  """
  delete single row from the table: "main_impact"
  """
  delete_main_impact_by_pk(sid: Int!): main_impact

  """
  delete data from the table: "migration"
  """
  delete_migration(
    """filter the rows which have to be deleted"""
    where: migration_bool_exp!
  ): migration_mutation_response

  """
  delete data from the table: "oncodna_gene_panel"
  """
  delete_oncodna_gene_panel(
    """filter the rows which have to be deleted"""
    where: oncodna_gene_panel_bool_exp!
  ): oncodna_gene_panel_mutation_response

  """
  delete single row from the table: "oncodna_gene_panel"
  """
  delete_oncodna_gene_panel_by_pk(sid: Int!): oncodna_gene_panel

  """
  delete data from the table: "oncodna_gene_priority"
  """
  delete_oncodna_gene_priority(
    """filter the rows which have to be deleted"""
    where: oncodna_gene_priority_bool_exp!
  ): oncodna_gene_priority_mutation_response

  """
  delete single row from the table: "oncodna_gene_priority"
  """
  delete_oncodna_gene_priority_by_pk(sid: Int!): oncodna_gene_priority

  """
  delete data from the table: "oncodna_overridden_impact"
  """
  delete_oncodna_overridden_impact(
    """filter the rows which have to be deleted"""
    where: oncodna_overridden_impact_bool_exp!
  ): oncodna_overridden_impact_mutation_response

  """
  delete single row from the table: "oncodna_overridden_impact"
  """
  delete_oncodna_overridden_impact_by_pk(sid: Int!): oncodna_overridden_impact

  """
  delete data from the table: "oncodna_transcript_priority"
  """
  delete_oncodna_transcript_priority(
    """filter the rows which have to be deleted"""
    where: oncodna_transcript_priority_bool_exp!
  ): oncodna_transcript_priority_mutation_response

  """
  delete single row from the table: "oncodna_transcript_priority"
  """
  delete_oncodna_transcript_priority_by_pk(sid: Int!): oncodna_transcript_priority

  """
  delete data from the table: "protein"
  """
  delete_protein(
    """filter the rows which have to be deleted"""
    where: protein_bool_exp!
  ): protein_mutation_response

  """
  delete single row from the table: "protein"
  """
  delete_protein_by_pk(sid: Int!): protein

  """
  delete data from the table: "provider"
  """
  delete_provider(
    """filter the rows which have to be deleted"""
    where: provider_bool_exp!
  ): provider_mutation_response

  """
  delete single row from the table: "provider"
  """
  delete_provider_by_pk(sid: Int!): provider

  """
  delete data from the table: "task"
  """
  delete_task(
    """filter the rows which have to be deleted"""
    where: task_bool_exp!
  ): task_mutation_response

  """
  delete single row from the table: "task"
  """
  delete_task_by_pk(sid: Int!): task

  """
  delete data from the table: "transcript"
  """
  delete_transcript(
    """filter the rows which have to be deleted"""
    where: transcript_bool_exp!
  ): transcript_mutation_response

  """
  delete single row from the table: "transcript"
  """
  delete_transcript_by_pk(sid: Int!): transcript

  """
  delete data from the table: "variant"
  """
  delete_variant(
    """filter the rows which have to be deleted"""
    where: variant_bool_exp!
  ): variant_mutation_response

  """
  delete single row from the table: "variant"
  """
  delete_variant_by_pk(sid: Int!): variant

  """
  insert data into the table: "compermed_oncogene_ts"
  """
  insert_compermed_oncogene_ts(
    """the rows to be inserted"""
    objects: [compermed_oncogene_ts_insert_input!]!

    """upsert condition"""
    on_conflict: compermed_oncogene_ts_on_conflict
  ): compermed_oncogene_ts_mutation_response

  """
  insert a single row into the table: "compermed_oncogene_ts"
  """
  insert_compermed_oncogene_ts_one(
    """the row to be inserted"""
    object: compermed_oncogene_ts_insert_input!

    """upsert condition"""
    on_conflict: compermed_oncogene_ts_on_conflict
  ): compermed_oncogene_ts

  """
  insert data into the table: "exon"
  """
  insert_exon(
    """the rows to be inserted"""
    objects: [exon_insert_input!]!

    """upsert condition"""
    on_conflict: exon_on_conflict
  ): exon_mutation_response

  """
  insert a single row into the table: "exon"
  """
  insert_exon_one(
    """the row to be inserted"""
    object: exon_insert_input!

    """upsert condition"""
    on_conflict: exon_on_conflict
  ): exon

  """
  insert data into the table: "gene"
  """
  insert_gene(
    """the rows to be inserted"""
    objects: [gene_insert_input!]!

    """upsert condition"""
    on_conflict: gene_on_conflict
  ): gene_mutation_response

  """
  insert a single row into the table: "gene"
  """
  insert_gene_one(
    """the row to be inserted"""
    object: gene_insert_input!

    """upsert condition"""
    on_conflict: gene_on_conflict
  ): gene

  """
  insert data into the table: "impact"
  """
  insert_impact(
    """the rows to be inserted"""
    objects: [impact_insert_input!]!

    """upsert condition"""
    on_conflict: impact_on_conflict
  ): impact_mutation_response

  """
  insert a single row into the table: "impact"
  """
  insert_impact_one(
    """the row to be inserted"""
    object: impact_insert_input!

    """upsert condition"""
    on_conflict: impact_on_conflict
  ): impact

  """
  insert data into the table: "main_impact"
  """
  insert_main_impact(
    """the rows to be inserted"""
    objects: [main_impact_insert_input!]!

    """upsert condition"""
    on_conflict: main_impact_on_conflict
  ): main_impact_mutation_response

  """
  insert a single row into the table: "main_impact"
  """
  insert_main_impact_one(
    """the row to be inserted"""
    object: main_impact_insert_input!

    """upsert condition"""
    on_conflict: main_impact_on_conflict
  ): main_impact

  """
  insert data into the table: "migration"
  """
  insert_migration(
    """the rows to be inserted"""
    objects: [migration_insert_input!]!

    """upsert condition"""
    on_conflict: migration_on_conflict
  ): migration_mutation_response

  """
  insert a single row into the table: "migration"
  """
  insert_migration_one(
    """the row to be inserted"""
    object: migration_insert_input!

    """upsert condition"""
    on_conflict: migration_on_conflict
  ): migration

  """
  insert data into the table: "oncodna_gene_panel"
  """
  insert_oncodna_gene_panel(
    """the rows to be inserted"""
    objects: [oncodna_gene_panel_insert_input!]!

    """upsert condition"""
    on_conflict: oncodna_gene_panel_on_conflict
  ): oncodna_gene_panel_mutation_response

  """
  insert a single row into the table: "oncodna_gene_panel"
  """
  insert_oncodna_gene_panel_one(
    """the row to be inserted"""
    object: oncodna_gene_panel_insert_input!

    """upsert condition"""
    on_conflict: oncodna_gene_panel_on_conflict
  ): oncodna_gene_panel

  """
  insert data into the table: "oncodna_gene_priority"
  """
  insert_oncodna_gene_priority(
    """the rows to be inserted"""
    objects: [oncodna_gene_priority_insert_input!]!

    """upsert condition"""
    on_conflict: oncodna_gene_priority_on_conflict
  ): oncodna_gene_priority_mutation_response

  """
  insert a single row into the table: "oncodna_gene_priority"
  """
  insert_oncodna_gene_priority_one(
    """the row to be inserted"""
    object: oncodna_gene_priority_insert_input!

    """upsert condition"""
    on_conflict: oncodna_gene_priority_on_conflict
  ): oncodna_gene_priority

  """
  insert data into the table: "oncodna_overridden_impact"
  """
  insert_oncodna_overridden_impact(
    """the rows to be inserted"""
    objects: [oncodna_overridden_impact_insert_input!]!

    """upsert condition"""
    on_conflict: oncodna_overridden_impact_on_conflict
  ): oncodna_overridden_impact_mutation_response

  """
  insert a single row into the table: "oncodna_overridden_impact"
  """
  insert_oncodna_overridden_impact_one(
    """the row to be inserted"""
    object: oncodna_overridden_impact_insert_input!

    """upsert condition"""
    on_conflict: oncodna_overridden_impact_on_conflict
  ): oncodna_overridden_impact

  """
  insert data into the table: "oncodna_transcript_priority"
  """
  insert_oncodna_transcript_priority(
    """the rows to be inserted"""
    objects: [oncodna_transcript_priority_insert_input!]!

    """upsert condition"""
    on_conflict: oncodna_transcript_priority_on_conflict
  ): oncodna_transcript_priority_mutation_response

  """
  insert a single row into the table: "oncodna_transcript_priority"
  """
  insert_oncodna_transcript_priority_one(
    """the row to be inserted"""
    object: oncodna_transcript_priority_insert_input!

    """upsert condition"""
    on_conflict: oncodna_transcript_priority_on_conflict
  ): oncodna_transcript_priority

  """
  insert data into the table: "protein"
  """
  insert_protein(
    """the rows to be inserted"""
    objects: [protein_insert_input!]!

    """upsert condition"""
    on_conflict: protein_on_conflict
  ): protein_mutation_response

  """
  insert a single row into the table: "protein"
  """
  insert_protein_one(
    """the row to be inserted"""
    object: protein_insert_input!

    """upsert condition"""
    on_conflict: protein_on_conflict
  ): protein

  """
  insert data into the table: "provider"
  """
  insert_provider(
    """the rows to be inserted"""
    objects: [provider_insert_input!]!

    """upsert condition"""
    on_conflict: provider_on_conflict
  ): provider_mutation_response

  """
  insert a single row into the table: "provider"
  """
  insert_provider_one(
    """the row to be inserted"""
    object: provider_insert_input!

    """upsert condition"""
    on_conflict: provider_on_conflict
  ): provider

  """
  insert data into the table: "task"
  """
  insert_task(
    """the rows to be inserted"""
    objects: [task_insert_input!]!

    """upsert condition"""
    on_conflict: task_on_conflict
  ): task_mutation_response

  """
  insert a single row into the table: "task"
  """
  insert_task_one(
    """the row to be inserted"""
    object: task_insert_input!

    """upsert condition"""
    on_conflict: task_on_conflict
  ): task

  """
  insert data into the table: "transcript"
  """
  insert_transcript(
    """the rows to be inserted"""
    objects: [transcript_insert_input!]!

    """upsert condition"""
    on_conflict: transcript_on_conflict
  ): transcript_mutation_response

  """
  insert a single row into the table: "transcript"
  """
  insert_transcript_one(
    """the row to be inserted"""
    object: transcript_insert_input!

    """upsert condition"""
    on_conflict: transcript_on_conflict
  ): transcript

  """
  insert data into the table: "variant"
  """
  insert_variant(
    """the rows to be inserted"""
    objects: [variant_insert_input!]!

    """upsert condition"""
    on_conflict: variant_on_conflict
  ): variant_mutation_response

  """
  insert a single row into the table: "variant"
  """
  insert_variant_one(
    """the row to be inserted"""
    object: variant_insert_input!

    """upsert condition"""
    on_conflict: variant_on_conflict
  ): variant

  """
  update data of the table: "compermed_oncogene_ts"
  """
  update_compermed_oncogene_ts(
    """increments the numeric columns with given value of the filtered values"""
    _inc: compermed_oncogene_ts_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: compermed_oncogene_ts_set_input

    """filter the rows which have to be updated"""
    where: compermed_oncogene_ts_bool_exp!
  ): compermed_oncogene_ts_mutation_response

  """
  update single row of the table: "compermed_oncogene_ts"
  """
  update_compermed_oncogene_ts_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: compermed_oncogene_ts_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: compermed_oncogene_ts_set_input
    pk_columns: compermed_oncogene_ts_pk_columns_input!
  ): compermed_oncogene_ts

  """
  update multiples rows of table: "compermed_oncogene_ts"
  """
  update_compermed_oncogene_ts_many(
    """updates to execute, in order"""
    updates: [compermed_oncogene_ts_updates!]!
  ): [compermed_oncogene_ts_mutation_response]

  """
  update data of the table: "exon"
  """
  update_exon(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: exon_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: exon_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: exon_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: exon_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: exon_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: exon_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: exon_set_input

    """filter the rows which have to be updated"""
    where: exon_bool_exp!
  ): exon_mutation_response

  """
  update single row of the table: "exon"
  """
  update_exon_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: exon_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: exon_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: exon_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: exon_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: exon_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: exon_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: exon_set_input
    pk_columns: exon_pk_columns_input!
  ): exon

  """
  update multiples rows of table: "exon"
  """
  update_exon_many(
    """updates to execute, in order"""
    updates: [exon_updates!]!
  ): [exon_mutation_response]

  """
  update data of the table: "gene"
  """
  update_gene(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: gene_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: gene_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: gene_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: gene_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: gene_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: gene_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: gene_set_input

    """filter the rows which have to be updated"""
    where: gene_bool_exp!
  ): gene_mutation_response

  """
  update single row of the table: "gene"
  """
  update_gene_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: gene_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: gene_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: gene_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: gene_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: gene_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: gene_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: gene_set_input
    pk_columns: gene_pk_columns_input!
  ): gene

  """
  update multiples rows of table: "gene"
  """
  update_gene_many(
    """updates to execute, in order"""
    updates: [gene_updates!]!
  ): [gene_mutation_response]

  """
  update data of the table: "impact"
  """
  update_impact(
    """increments the numeric columns with given value of the filtered values"""
    _inc: impact_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: impact_set_input

    """filter the rows which have to be updated"""
    where: impact_bool_exp!
  ): impact_mutation_response

  """
  update single row of the table: "impact"
  """
  update_impact_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: impact_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: impact_set_input
    pk_columns: impact_pk_columns_input!
  ): impact

  """
  update multiples rows of table: "impact"
  """
  update_impact_many(
    """updates to execute, in order"""
    updates: [impact_updates!]!
  ): [impact_mutation_response]

  """
  update data of the table: "main_impact"
  """
  update_main_impact(
    """increments the numeric columns with given value of the filtered values"""
    _inc: main_impact_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: main_impact_set_input

    """filter the rows which have to be updated"""
    where: main_impact_bool_exp!
  ): main_impact_mutation_response

  """
  update single row of the table: "main_impact"
  """
  update_main_impact_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: main_impact_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: main_impact_set_input
    pk_columns: main_impact_pk_columns_input!
  ): main_impact

  """
  update multiples rows of table: "main_impact"
  """
  update_main_impact_many(
    """updates to execute, in order"""
    updates: [main_impact_updates!]!
  ): [main_impact_mutation_response]

  """
  update data of the table: "migration"
  """
  update_migration(
    """increments the numeric columns with given value of the filtered values"""
    _inc: migration_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: migration_set_input

    """filter the rows which have to be updated"""
    where: migration_bool_exp!
  ): migration_mutation_response

  """
  update multiples rows of table: "migration"
  """
  update_migration_many(
    """updates to execute, in order"""
    updates: [migration_updates!]!
  ): [migration_mutation_response]

  """
  update data of the table: "oncodna_gene_panel"
  """
  update_oncodna_gene_panel(
    """increments the numeric columns with given value of the filtered values"""
    _inc: oncodna_gene_panel_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: oncodna_gene_panel_set_input

    """filter the rows which have to be updated"""
    where: oncodna_gene_panel_bool_exp!
  ): oncodna_gene_panel_mutation_response

  """
  update single row of the table: "oncodna_gene_panel"
  """
  update_oncodna_gene_panel_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: oncodna_gene_panel_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: oncodna_gene_panel_set_input
    pk_columns: oncodna_gene_panel_pk_columns_input!
  ): oncodna_gene_panel

  """
  update multiples rows of table: "oncodna_gene_panel"
  """
  update_oncodna_gene_panel_many(
    """updates to execute, in order"""
    updates: [oncodna_gene_panel_updates!]!
  ): [oncodna_gene_panel_mutation_response]

  """
  update data of the table: "oncodna_gene_priority"
  """
  update_oncodna_gene_priority(
    """increments the numeric columns with given value of the filtered values"""
    _inc: oncodna_gene_priority_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: oncodna_gene_priority_set_input

    """filter the rows which have to be updated"""
    where: oncodna_gene_priority_bool_exp!
  ): oncodna_gene_priority_mutation_response

  """
  update single row of the table: "oncodna_gene_priority"
  """
  update_oncodna_gene_priority_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: oncodna_gene_priority_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: oncodna_gene_priority_set_input
    pk_columns: oncodna_gene_priority_pk_columns_input!
  ): oncodna_gene_priority

  """
  update multiples rows of table: "oncodna_gene_priority"
  """
  update_oncodna_gene_priority_many(
    """updates to execute, in order"""
    updates: [oncodna_gene_priority_updates!]!
  ): [oncodna_gene_priority_mutation_response]

  """
  update data of the table: "oncodna_overridden_impact"
  """
  update_oncodna_overridden_impact(
    """increments the numeric columns with given value of the filtered values"""
    _inc: oncodna_overridden_impact_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: oncodna_overridden_impact_set_input

    """filter the rows which have to be updated"""
    where: oncodna_overridden_impact_bool_exp!
  ): oncodna_overridden_impact_mutation_response

  """
  update single row of the table: "oncodna_overridden_impact"
  """
  update_oncodna_overridden_impact_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: oncodna_overridden_impact_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: oncodna_overridden_impact_set_input
    pk_columns: oncodna_overridden_impact_pk_columns_input!
  ): oncodna_overridden_impact

  """
  update multiples rows of table: "oncodna_overridden_impact"
  """
  update_oncodna_overridden_impact_many(
    """updates to execute, in order"""
    updates: [oncodna_overridden_impact_updates!]!
  ): [oncodna_overridden_impact_mutation_response]

  """
  update data of the table: "oncodna_transcript_priority"
  """
  update_oncodna_transcript_priority(
    """increments the numeric columns with given value of the filtered values"""
    _inc: oncodna_transcript_priority_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: oncodna_transcript_priority_set_input

    """filter the rows which have to be updated"""
    where: oncodna_transcript_priority_bool_exp!
  ): oncodna_transcript_priority_mutation_response

  """
  update single row of the table: "oncodna_transcript_priority"
  """
  update_oncodna_transcript_priority_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: oncodna_transcript_priority_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: oncodna_transcript_priority_set_input
    pk_columns: oncodna_transcript_priority_pk_columns_input!
  ): oncodna_transcript_priority

  """
  update multiples rows of table: "oncodna_transcript_priority"
  """
  update_oncodna_transcript_priority_many(
    """updates to execute, in order"""
    updates: [oncodna_transcript_priority_updates!]!
  ): [oncodna_transcript_priority_mutation_response]

  """
  update data of the table: "protein"
  """
  update_protein(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: protein_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: protein_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: protein_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: protein_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: protein_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: protein_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: protein_set_input

    """filter the rows which have to be updated"""
    where: protein_bool_exp!
  ): protein_mutation_response

  """
  update single row of the table: "protein"
  """
  update_protein_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: protein_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: protein_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: protein_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: protein_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: protein_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: protein_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: protein_set_input
    pk_columns: protein_pk_columns_input!
  ): protein

  """
  update multiples rows of table: "protein"
  """
  update_protein_many(
    """updates to execute, in order"""
    updates: [protein_updates!]!
  ): [protein_mutation_response]

  """
  update data of the table: "provider"
  """
  update_provider(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: provider_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: provider_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: provider_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: provider_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: provider_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: provider_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: provider_set_input

    """filter the rows which have to be updated"""
    where: provider_bool_exp!
  ): provider_mutation_response

  """
  update single row of the table: "provider"
  """
  update_provider_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: provider_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: provider_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: provider_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: provider_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: provider_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: provider_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: provider_set_input
    pk_columns: provider_pk_columns_input!
  ): provider

  """
  update multiples rows of table: "provider"
  """
  update_provider_many(
    """updates to execute, in order"""
    updates: [provider_updates!]!
  ): [provider_mutation_response]

  """
  update data of the table: "task"
  """
  update_task(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: task_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: task_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: task_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: task_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: task_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: task_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: task_set_input

    """filter the rows which have to be updated"""
    where: task_bool_exp!
  ): task_mutation_response

  """
  update single row of the table: "task"
  """
  update_task_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: task_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: task_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: task_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: task_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: task_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: task_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: task_set_input
    pk_columns: task_pk_columns_input!
  ): task

  """
  update multiples rows of table: "task"
  """
  update_task_many(
    """updates to execute, in order"""
    updates: [task_updates!]!
  ): [task_mutation_response]

  """
  update data of the table: "transcript"
  """
  update_transcript(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: transcript_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: transcript_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: transcript_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: transcript_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: transcript_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: transcript_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: transcript_set_input

    """filter the rows which have to be updated"""
    where: transcript_bool_exp!
  ): transcript_mutation_response

  """
  update single row of the table: "transcript"
  """
  update_transcript_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: transcript_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: transcript_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: transcript_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: transcript_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: transcript_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: transcript_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: transcript_set_input
    pk_columns: transcript_pk_columns_input!
  ): transcript

  """
  update multiples rows of table: "transcript"
  """
  update_transcript_many(
    """updates to execute, in order"""
    updates: [transcript_updates!]!
  ): [transcript_mutation_response]

  """
  update data of the table: "variant"
  """
  update_variant(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: variant_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: variant_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: variant_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: variant_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: variant_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: variant_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: variant_set_input

    """filter the rows which have to be updated"""
    where: variant_bool_exp!
  ): variant_mutation_response

  """
  update single row of the table: "variant"
  """
  update_variant_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: variant_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: variant_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: variant_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: variant_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: variant_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: variant_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: variant_set_input
    pk_columns: variant_pk_columns_input!
  ): variant

  """
  update multiples rows of table: "variant"
  """
  update_variant_many(
    """updates to execute, in order"""
    updates: [variant_updates!]!
  ): [variant_mutation_response]
}

"""
columns and relationships of "oncodna_gene_panel"
"""
type oncodna_gene_panel {
  hgnc_id: String!
  panel: String!
  sid: Int!
  uid: uuid
}

"""
aggregated selection of "oncodna_gene_panel"
"""
type oncodna_gene_panel_aggregate {
  aggregate: oncodna_gene_panel_aggregate_fields
  nodes: [oncodna_gene_panel!]!
}

"""
aggregate fields of "oncodna_gene_panel"
"""
type oncodna_gene_panel_aggregate_fields {
  avg: oncodna_gene_panel_avg_fields
  count(columns: [oncodna_gene_panel_select_column!], distinct: Boolean): Int!
  max: oncodna_gene_panel_max_fields
  min: oncodna_gene_panel_min_fields
  stddev: oncodna_gene_panel_stddev_fields
  stddev_pop: oncodna_gene_panel_stddev_pop_fields
  stddev_samp: oncodna_gene_panel_stddev_samp_fields
  sum: oncodna_gene_panel_sum_fields
  var_pop: oncodna_gene_panel_var_pop_fields
  var_samp: oncodna_gene_panel_var_samp_fields
  variance: oncodna_gene_panel_variance_fields
}

"""aggregate avg on columns"""
type oncodna_gene_panel_avg_fields {
  sid: Float
}

"""
Boolean expression to filter rows from the table "oncodna_gene_panel". All fields are combined with a logical 'AND'.
"""
input oncodna_gene_panel_bool_exp {
  _and: [oncodna_gene_panel_bool_exp!]
  _not: oncodna_gene_panel_bool_exp
  _or: [oncodna_gene_panel_bool_exp!]
  hgnc_id: String_comparison_exp
  panel: String_comparison_exp
  sid: Int_comparison_exp
  uid: uuid_comparison_exp
}

"""
unique or primary key constraints on table "oncodna_gene_panel"
"""
enum oncodna_gene_panel_constraint {
  """
  unique or primary key constraint on columns "hgnc_id", "panel"
  """
  oncodna_gene_panel_hgnc_id

  """
  unique or primary key constraint on columns "sid"
  """
  oncodna_gene_panel_pkey

  """
  unique or primary key constraint on columns "uid"
  """
  oncodna_gene_panel_uid_key
}

"""
input type for incrementing numeric columns in table "oncodna_gene_panel"
"""
input oncodna_gene_panel_inc_input {
  sid: Int
}

"""
input type for inserting data into table "oncodna_gene_panel"
"""
input oncodna_gene_panel_insert_input {
  hgnc_id: String
  panel: String
  sid: Int
  uid: uuid
}

"""aggregate max on columns"""
type oncodna_gene_panel_max_fields {
  hgnc_id: String
  panel: String
  sid: Int
  uid: uuid
}

"""aggregate min on columns"""
type oncodna_gene_panel_min_fields {
  hgnc_id: String
  panel: String
  sid: Int
  uid: uuid
}

"""
response of any mutation on the table "oncodna_gene_panel"
"""
type oncodna_gene_panel_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [oncodna_gene_panel!]!
}

"""
on_conflict condition type for table "oncodna_gene_panel"
"""
input oncodna_gene_panel_on_conflict {
  constraint: oncodna_gene_panel_constraint!
  update_columns: [oncodna_gene_panel_update_column!]! = []
  where: oncodna_gene_panel_bool_exp
}

"""Ordering options when selecting data from "oncodna_gene_panel"."""
input oncodna_gene_panel_order_by {
  hgnc_id: order_by
  panel: order_by
  sid: order_by
  uid: order_by
}

"""primary key columns input for table: oncodna_gene_panel"""
input oncodna_gene_panel_pk_columns_input {
  sid: Int!
}

"""
select columns of table "oncodna_gene_panel"
"""
enum oncodna_gene_panel_select_column {
  """column name"""
  hgnc_id

  """column name"""
  panel

  """column name"""
  sid

  """column name"""
  uid
}

"""
input type for updating data in table "oncodna_gene_panel"
"""
input oncodna_gene_panel_set_input {
  hgnc_id: String
  panel: String
  sid: Int
  uid: uuid
}

"""aggregate stddev on columns"""
type oncodna_gene_panel_stddev_fields {
  sid: Float
}

"""aggregate stddev_pop on columns"""
type oncodna_gene_panel_stddev_pop_fields {
  sid: Float
}

"""aggregate stddev_samp on columns"""
type oncodna_gene_panel_stddev_samp_fields {
  sid: Float
}

"""
Streaming cursor of the table "oncodna_gene_panel"
"""
input oncodna_gene_panel_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: oncodna_gene_panel_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input oncodna_gene_panel_stream_cursor_value_input {
  hgnc_id: String
  panel: String
  sid: Int
  uid: uuid
}

"""aggregate sum on columns"""
type oncodna_gene_panel_sum_fields {
  sid: Int
}

"""
update columns of table "oncodna_gene_panel"
"""
enum oncodna_gene_panel_update_column {
  """column name"""
  hgnc_id

  """column name"""
  panel

  """column name"""
  sid

  """column name"""
  uid
}

input oncodna_gene_panel_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: oncodna_gene_panel_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: oncodna_gene_panel_set_input

  """filter the rows which have to be updated"""
  where: oncodna_gene_panel_bool_exp!
}

"""aggregate var_pop on columns"""
type oncodna_gene_panel_var_pop_fields {
  sid: Float
}

"""aggregate var_samp on columns"""
type oncodna_gene_panel_var_samp_fields {
  sid: Float
}

"""aggregate variance on columns"""
type oncodna_gene_panel_variance_fields {
  sid: Float
}

"""
columns and relationships of "oncodna_gene_priority"
"""
type oncodna_gene_priority {
  created_at: timestamptz
  created_by: String
  hgnc_id: String!

  """Lower is more prioritized. default is 10"""
  priority: Int!
  sid: Int!
  uid: uuid
  updated_at: timestamptz
  updated_by: String
}

"""
aggregated selection of "oncodna_gene_priority"
"""
type oncodna_gene_priority_aggregate {
  aggregate: oncodna_gene_priority_aggregate_fields
  nodes: [oncodna_gene_priority!]!
}

"""
aggregate fields of "oncodna_gene_priority"
"""
type oncodna_gene_priority_aggregate_fields {
  avg: oncodna_gene_priority_avg_fields
  count(columns: [oncodna_gene_priority_select_column!], distinct: Boolean): Int!
  max: oncodna_gene_priority_max_fields
  min: oncodna_gene_priority_min_fields
  stddev: oncodna_gene_priority_stddev_fields
  stddev_pop: oncodna_gene_priority_stddev_pop_fields
  stddev_samp: oncodna_gene_priority_stddev_samp_fields
  sum: oncodna_gene_priority_sum_fields
  var_pop: oncodna_gene_priority_var_pop_fields
  var_samp: oncodna_gene_priority_var_samp_fields
  variance: oncodna_gene_priority_variance_fields
}

"""aggregate avg on columns"""
type oncodna_gene_priority_avg_fields {
  """Lower is more prioritized. default is 10"""
  priority: Float
  sid: Float
}

"""
Boolean expression to filter rows from the table "oncodna_gene_priority". All fields are combined with a logical 'AND'.
"""
input oncodna_gene_priority_bool_exp {
  _and: [oncodna_gene_priority_bool_exp!]
  _not: oncodna_gene_priority_bool_exp
  _or: [oncodna_gene_priority_bool_exp!]
  created_at: timestamptz_comparison_exp
  created_by: String_comparison_exp
  hgnc_id: String_comparison_exp
  priority: Int_comparison_exp
  sid: Int_comparison_exp
  uid: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
  updated_by: String_comparison_exp
}

"""
unique or primary key constraints on table "oncodna_gene_priority"
"""
enum oncodna_gene_priority_constraint {
  """
  unique or primary key constraint on columns "hgnc_id"
  """
  oncodna_gene_priority_hgnc_id_key

  """
  unique or primary key constraint on columns "sid"
  """
  oncodna_gene_priority_pkey

  """
  unique or primary key constraint on columns "uid"
  """
  oncodna_gene_priority_uid_key
}

"""
input type for incrementing numeric columns in table "oncodna_gene_priority"
"""
input oncodna_gene_priority_inc_input {
  """Lower is more prioritized. default is 10"""
  priority: Int
  sid: Int
}

"""
input type for inserting data into table "oncodna_gene_priority"
"""
input oncodna_gene_priority_insert_input {
  created_at: timestamptz
  created_by: String
  hgnc_id: String

  """Lower is more prioritized. default is 10"""
  priority: Int
  sid: Int
  uid: uuid
  updated_at: timestamptz
  updated_by: String
}

"""aggregate max on columns"""
type oncodna_gene_priority_max_fields {
  created_at: timestamptz
  created_by: String
  hgnc_id: String

  """Lower is more prioritized. default is 10"""
  priority: Int
  sid: Int
  uid: uuid
  updated_at: timestamptz
  updated_by: String
}

"""aggregate min on columns"""
type oncodna_gene_priority_min_fields {
  created_at: timestamptz
  created_by: String
  hgnc_id: String

  """Lower is more prioritized. default is 10"""
  priority: Int
  sid: Int
  uid: uuid
  updated_at: timestamptz
  updated_by: String
}

"""
response of any mutation on the table "oncodna_gene_priority"
"""
type oncodna_gene_priority_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [oncodna_gene_priority!]!
}

"""
on_conflict condition type for table "oncodna_gene_priority"
"""
input oncodna_gene_priority_on_conflict {
  constraint: oncodna_gene_priority_constraint!
  update_columns: [oncodna_gene_priority_update_column!]! = []
  where: oncodna_gene_priority_bool_exp
}

"""Ordering options when selecting data from "oncodna_gene_priority"."""
input oncodna_gene_priority_order_by {
  created_at: order_by
  created_by: order_by
  hgnc_id: order_by
  priority: order_by
  sid: order_by
  uid: order_by
  updated_at: order_by
  updated_by: order_by
}

"""primary key columns input for table: oncodna_gene_priority"""
input oncodna_gene_priority_pk_columns_input {
  sid: Int!
}

"""
select columns of table "oncodna_gene_priority"
"""
enum oncodna_gene_priority_select_column {
  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  hgnc_id

  """column name"""
  priority

  """column name"""
  sid

  """column name"""
  uid

  """column name"""
  updated_at

  """column name"""
  updated_by
}

"""
input type for updating data in table "oncodna_gene_priority"
"""
input oncodna_gene_priority_set_input {
  created_at: timestamptz
  created_by: String
  hgnc_id: String

  """Lower is more prioritized. default is 10"""
  priority: Int
  sid: Int
  uid: uuid
  updated_at: timestamptz
  updated_by: String
}

"""aggregate stddev on columns"""
type oncodna_gene_priority_stddev_fields {
  """Lower is more prioritized. default is 10"""
  priority: Float
  sid: Float
}

"""aggregate stddev_pop on columns"""
type oncodna_gene_priority_stddev_pop_fields {
  """Lower is more prioritized. default is 10"""
  priority: Float
  sid: Float
}

"""aggregate stddev_samp on columns"""
type oncodna_gene_priority_stddev_samp_fields {
  """Lower is more prioritized. default is 10"""
  priority: Float
  sid: Float
}

"""
Streaming cursor of the table "oncodna_gene_priority"
"""
input oncodna_gene_priority_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: oncodna_gene_priority_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input oncodna_gene_priority_stream_cursor_value_input {
  created_at: timestamptz
  created_by: String
  hgnc_id: String

  """Lower is more prioritized. default is 10"""
  priority: Int
  sid: Int
  uid: uuid
  updated_at: timestamptz
  updated_by: String
}

"""aggregate sum on columns"""
type oncodna_gene_priority_sum_fields {
  """Lower is more prioritized. default is 10"""
  priority: Int
  sid: Int
}

"""
update columns of table "oncodna_gene_priority"
"""
enum oncodna_gene_priority_update_column {
  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  hgnc_id

  """column name"""
  priority

  """column name"""
  sid

  """column name"""
  uid

  """column name"""
  updated_at

  """column name"""
  updated_by
}

input oncodna_gene_priority_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: oncodna_gene_priority_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: oncodna_gene_priority_set_input

  """filter the rows which have to be updated"""
  where: oncodna_gene_priority_bool_exp!
}

"""aggregate var_pop on columns"""
type oncodna_gene_priority_var_pop_fields {
  """Lower is more prioritized. default is 10"""
  priority: Float
  sid: Float
}

"""aggregate var_samp on columns"""
type oncodna_gene_priority_var_samp_fields {
  """Lower is more prioritized. default is 10"""
  priority: Float
  sid: Float
}

"""aggregate variance on columns"""
type oncodna_gene_priority_variance_fields {
  """Lower is more prioritized. default is 10"""
  priority: Float
  sid: Float
}

"""
columns and relationships of "oncodna_overridden_impact"
"""
type oncodna_overridden_impact {
  c_type: String
  created_at: timestamptz
  created_by: String
  feature_number: String
  feature_type: String
  hgnc_id: String
  hgvsc: String
  hgvsgs: String
  hgvsp_long: String
  hgvsp_short: String
  p_type: String
  protein_refseq: String
  provider_code: String!
  reference_genome: reference_genome!
  score: Int
  sid: Int!
  transcript_refseq: String
  uid: uuid
  updated_at: timestamptz
  updated_by: String
  variant_key: String!
}

"""
aggregated selection of "oncodna_overridden_impact"
"""
type oncodna_overridden_impact_aggregate {
  aggregate: oncodna_overridden_impact_aggregate_fields
  nodes: [oncodna_overridden_impact!]!
}

"""
aggregate fields of "oncodna_overridden_impact"
"""
type oncodna_overridden_impact_aggregate_fields {
  avg: oncodna_overridden_impact_avg_fields
  count(columns: [oncodna_overridden_impact_select_column!], distinct: Boolean): Int!
  max: oncodna_overridden_impact_max_fields
  min: oncodna_overridden_impact_min_fields
  stddev: oncodna_overridden_impact_stddev_fields
  stddev_pop: oncodna_overridden_impact_stddev_pop_fields
  stddev_samp: oncodna_overridden_impact_stddev_samp_fields
  sum: oncodna_overridden_impact_sum_fields
  var_pop: oncodna_overridden_impact_var_pop_fields
  var_samp: oncodna_overridden_impact_var_samp_fields
  variance: oncodna_overridden_impact_variance_fields
}

"""aggregate avg on columns"""
type oncodna_overridden_impact_avg_fields {
  score: Float
  sid: Float
}

"""
Boolean expression to filter rows from the table "oncodna_overridden_impact". All fields are combined with a logical 'AND'.
"""
input oncodna_overridden_impact_bool_exp {
  _and: [oncodna_overridden_impact_bool_exp!]
  _not: oncodna_overridden_impact_bool_exp
  _or: [oncodna_overridden_impact_bool_exp!]
  c_type: String_comparison_exp
  created_at: timestamptz_comparison_exp
  created_by: String_comparison_exp
  feature_number: String_comparison_exp
  feature_type: String_comparison_exp
  hgnc_id: String_comparison_exp
  hgvsc: String_comparison_exp
  hgvsgs: String_comparison_exp
  hgvsp_long: String_comparison_exp
  hgvsp_short: String_comparison_exp
  p_type: String_comparison_exp
  protein_refseq: String_comparison_exp
  provider_code: String_comparison_exp
  reference_genome: reference_genome_comparison_exp
  score: Int_comparison_exp
  sid: Int_comparison_exp
  transcript_refseq: String_comparison_exp
  uid: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
  updated_by: String_comparison_exp
  variant_key: String_comparison_exp
}

"""
unique or primary key constraints on table "oncodna_overridden_impact"
"""
enum oncodna_overridden_impact_constraint {
  """
  unique or primary key constraint on columns "sid"
  """
  oncodna_overridden_impact_pkey

  """
  unique or primary key constraint on columns "uid"
  """
  oncodna_overridden_impact_uid_key

  """
  unique or primary key constraint on columns "provider_code", "hgvsgs"
  """
  oncodna_overridden_impact_variant_transcript_provider_idx
}

"""
input type for incrementing numeric columns in table "oncodna_overridden_impact"
"""
input oncodna_overridden_impact_inc_input {
  score: Int
  sid: Int
}

"""
input type for inserting data into table "oncodna_overridden_impact"
"""
input oncodna_overridden_impact_insert_input {
  c_type: String
  created_at: timestamptz
  created_by: String
  feature_number: String
  feature_type: String
  hgnc_id: String
  hgvsc: String
  hgvsgs: String
  hgvsp_long: String
  hgvsp_short: String
  p_type: String
  protein_refseq: String
  provider_code: String
  reference_genome: reference_genome
  score: Int
  sid: Int
  transcript_refseq: String
  uid: uuid
  updated_at: timestamptz
  updated_by: String
  variant_key: String
}

"""aggregate max on columns"""
type oncodna_overridden_impact_max_fields {
  c_type: String
  created_at: timestamptz
  created_by: String
  feature_number: String
  feature_type: String
  hgnc_id: String
  hgvsc: String
  hgvsgs: String
  hgvsp_long: String
  hgvsp_short: String
  p_type: String
  protein_refseq: String
  provider_code: String
  reference_genome: reference_genome
  score: Int
  sid: Int
  transcript_refseq: String
  uid: uuid
  updated_at: timestamptz
  updated_by: String
  variant_key: String
}

"""aggregate min on columns"""
type oncodna_overridden_impact_min_fields {
  c_type: String
  created_at: timestamptz
  created_by: String
  feature_number: String
  feature_type: String
  hgnc_id: String
  hgvsc: String
  hgvsgs: String
  hgvsp_long: String
  hgvsp_short: String
  p_type: String
  protein_refseq: String
  provider_code: String
  reference_genome: reference_genome
  score: Int
  sid: Int
  transcript_refseq: String
  uid: uuid
  updated_at: timestamptz
  updated_by: String
  variant_key: String
}

"""
response of any mutation on the table "oncodna_overridden_impact"
"""
type oncodna_overridden_impact_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [oncodna_overridden_impact!]!
}

"""
on_conflict condition type for table "oncodna_overridden_impact"
"""
input oncodna_overridden_impact_on_conflict {
  constraint: oncodna_overridden_impact_constraint!
  update_columns: [oncodna_overridden_impact_update_column!]! = []
  where: oncodna_overridden_impact_bool_exp
}

"""Ordering options when selecting data from "oncodna_overridden_impact"."""
input oncodna_overridden_impact_order_by {
  c_type: order_by
  created_at: order_by
  created_by: order_by
  feature_number: order_by
  feature_type: order_by
  hgnc_id: order_by
  hgvsc: order_by
  hgvsgs: order_by
  hgvsp_long: order_by
  hgvsp_short: order_by
  p_type: order_by
  protein_refseq: order_by
  provider_code: order_by
  reference_genome: order_by
  score: order_by
  sid: order_by
  transcript_refseq: order_by
  uid: order_by
  updated_at: order_by
  updated_by: order_by
  variant_key: order_by
}

"""primary key columns input for table: oncodna_overridden_impact"""
input oncodna_overridden_impact_pk_columns_input {
  sid: Int!
}

"""
select columns of table "oncodna_overridden_impact"
"""
enum oncodna_overridden_impact_select_column {
  """column name"""
  c_type

  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  feature_number

  """column name"""
  feature_type

  """column name"""
  hgnc_id

  """column name"""
  hgvsc

  """column name"""
  hgvsgs

  """column name"""
  hgvsp_long

  """column name"""
  hgvsp_short

  """column name"""
  p_type

  """column name"""
  protein_refseq

  """column name"""
  provider_code

  """column name"""
  reference_genome

  """column name"""
  score

  """column name"""
  sid

  """column name"""
  transcript_refseq

  """column name"""
  uid

  """column name"""
  updated_at

  """column name"""
  updated_by

  """column name"""
  variant_key
}

"""
input type for updating data in table "oncodna_overridden_impact"
"""
input oncodna_overridden_impact_set_input {
  c_type: String
  created_at: timestamptz
  created_by: String
  feature_number: String
  feature_type: String
  hgnc_id: String
  hgvsc: String
  hgvsgs: String
  hgvsp_long: String
  hgvsp_short: String
  p_type: String
  protein_refseq: String
  provider_code: String
  reference_genome: reference_genome
  score: Int
  sid: Int
  transcript_refseq: String
  uid: uuid
  updated_at: timestamptz
  updated_by: String
  variant_key: String
}

"""aggregate stddev on columns"""
type oncodna_overridden_impact_stddev_fields {
  score: Float
  sid: Float
}

"""aggregate stddev_pop on columns"""
type oncodna_overridden_impact_stddev_pop_fields {
  score: Float
  sid: Float
}

"""aggregate stddev_samp on columns"""
type oncodna_overridden_impact_stddev_samp_fields {
  score: Float
  sid: Float
}

"""
Streaming cursor of the table "oncodna_overridden_impact"
"""
input oncodna_overridden_impact_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: oncodna_overridden_impact_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input oncodna_overridden_impact_stream_cursor_value_input {
  c_type: String
  created_at: timestamptz
  created_by: String
  feature_number: String
  feature_type: String
  hgnc_id: String
  hgvsc: String
  hgvsgs: String
  hgvsp_long: String
  hgvsp_short: String
  p_type: String
  protein_refseq: String
  provider_code: String
  reference_genome: reference_genome
  score: Int
  sid: Int
  transcript_refseq: String
  uid: uuid
  updated_at: timestamptz
  updated_by: String
  variant_key: String
}

"""aggregate sum on columns"""
type oncodna_overridden_impact_sum_fields {
  score: Int
  sid: Int
}

"""
update columns of table "oncodna_overridden_impact"
"""
enum oncodna_overridden_impact_update_column {
  """column name"""
  c_type

  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  feature_number

  """column name"""
  feature_type

  """column name"""
  hgnc_id

  """column name"""
  hgvsc

  """column name"""
  hgvsgs

  """column name"""
  hgvsp_long

  """column name"""
  hgvsp_short

  """column name"""
  p_type

  """column name"""
  protein_refseq

  """column name"""
  provider_code

  """column name"""
  reference_genome

  """column name"""
  score

  """column name"""
  sid

  """column name"""
  transcript_refseq

  """column name"""
  uid

  """column name"""
  updated_at

  """column name"""
  updated_by

  """column name"""
  variant_key
}

input oncodna_overridden_impact_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: oncodna_overridden_impact_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: oncodna_overridden_impact_set_input

  """filter the rows which have to be updated"""
  where: oncodna_overridden_impact_bool_exp!
}

"""aggregate var_pop on columns"""
type oncodna_overridden_impact_var_pop_fields {
  score: Float
  sid: Float
}

"""aggregate var_samp on columns"""
type oncodna_overridden_impact_var_samp_fields {
  score: Float
  sid: Float
}

"""aggregate variance on columns"""
type oncodna_overridden_impact_variance_fields {
  score: Float
  sid: Float
}

"""
columns and relationships of "oncodna_transcript_priority"
"""
type oncodna_transcript_priority {
  created_at: timestamptz
  created_by: String

  """Lower is more prioritized. default is 10"""
  priority: Int!
  sid: Int!
  transcript_acc_num_full: String!
  uid: uuid
  updated_at: timestamptz
  updated_by: String
}

"""
aggregated selection of "oncodna_transcript_priority"
"""
type oncodna_transcript_priority_aggregate {
  aggregate: oncodna_transcript_priority_aggregate_fields
  nodes: [oncodna_transcript_priority!]!
}

"""
aggregate fields of "oncodna_transcript_priority"
"""
type oncodna_transcript_priority_aggregate_fields {
  avg: oncodna_transcript_priority_avg_fields
  count(columns: [oncodna_transcript_priority_select_column!], distinct: Boolean): Int!
  max: oncodna_transcript_priority_max_fields
  min: oncodna_transcript_priority_min_fields
  stddev: oncodna_transcript_priority_stddev_fields
  stddev_pop: oncodna_transcript_priority_stddev_pop_fields
  stddev_samp: oncodna_transcript_priority_stddev_samp_fields
  sum: oncodna_transcript_priority_sum_fields
  var_pop: oncodna_transcript_priority_var_pop_fields
  var_samp: oncodna_transcript_priority_var_samp_fields
  variance: oncodna_transcript_priority_variance_fields
}

"""aggregate avg on columns"""
type oncodna_transcript_priority_avg_fields {
  """Lower is more prioritized. default is 10"""
  priority: Float
  sid: Float
}

"""
Boolean expression to filter rows from the table "oncodna_transcript_priority". All fields are combined with a logical 'AND'.
"""
input oncodna_transcript_priority_bool_exp {
  _and: [oncodna_transcript_priority_bool_exp!]
  _not: oncodna_transcript_priority_bool_exp
  _or: [oncodna_transcript_priority_bool_exp!]
  created_at: timestamptz_comparison_exp
  created_by: String_comparison_exp
  priority: Int_comparison_exp
  sid: Int_comparison_exp
  transcript_acc_num_full: String_comparison_exp
  uid: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
  updated_by: String_comparison_exp
}

"""
unique or primary key constraints on table "oncodna_transcript_priority"
"""
enum oncodna_transcript_priority_constraint {
  """
  unique or primary key constraint on columns "transcript_acc_num_full"
  """
  oncodna_transcript_idx2_priority

  """
  unique or primary key constraint on columns "sid"
  """
  oncodna_transcript_priority_pkey

  """
  unique or primary key constraint on columns "transcript_acc_num_full"
  """
  oncodna_transcript_priority_transcript_acc_num_full_key

  """
  unique or primary key constraint on columns "uid"
  """
  oncodna_transcript_priority_uid_key
}

"""
input type for incrementing numeric columns in table "oncodna_transcript_priority"
"""
input oncodna_transcript_priority_inc_input {
  """Lower is more prioritized. default is 10"""
  priority: Int
  sid: Int
}

"""
input type for inserting data into table "oncodna_transcript_priority"
"""
input oncodna_transcript_priority_insert_input {
  created_at: timestamptz
  created_by: String

  """Lower is more prioritized. default is 10"""
  priority: Int
  sid: Int
  transcript_acc_num_full: String
  uid: uuid
  updated_at: timestamptz
  updated_by: String
}

"""aggregate max on columns"""
type oncodna_transcript_priority_max_fields {
  created_at: timestamptz
  created_by: String

  """Lower is more prioritized. default is 10"""
  priority: Int
  sid: Int
  transcript_acc_num_full: String
  uid: uuid
  updated_at: timestamptz
  updated_by: String
}

"""aggregate min on columns"""
type oncodna_transcript_priority_min_fields {
  created_at: timestamptz
  created_by: String

  """Lower is more prioritized. default is 10"""
  priority: Int
  sid: Int
  transcript_acc_num_full: String
  uid: uuid
  updated_at: timestamptz
  updated_by: String
}

"""
response of any mutation on the table "oncodna_transcript_priority"
"""
type oncodna_transcript_priority_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [oncodna_transcript_priority!]!
}

"""
on_conflict condition type for table "oncodna_transcript_priority"
"""
input oncodna_transcript_priority_on_conflict {
  constraint: oncodna_transcript_priority_constraint!
  update_columns: [oncodna_transcript_priority_update_column!]! = []
  where: oncodna_transcript_priority_bool_exp
}

"""
Ordering options when selecting data from "oncodna_transcript_priority".
"""
input oncodna_transcript_priority_order_by {
  created_at: order_by
  created_by: order_by
  priority: order_by
  sid: order_by
  transcript_acc_num_full: order_by
  uid: order_by
  updated_at: order_by
  updated_by: order_by
}

"""primary key columns input for table: oncodna_transcript_priority"""
input oncodna_transcript_priority_pk_columns_input {
  sid: Int!
}

"""
select columns of table "oncodna_transcript_priority"
"""
enum oncodna_transcript_priority_select_column {
  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  priority

  """column name"""
  sid

  """column name"""
  transcript_acc_num_full

  """column name"""
  uid

  """column name"""
  updated_at

  """column name"""
  updated_by
}

"""
input type for updating data in table "oncodna_transcript_priority"
"""
input oncodna_transcript_priority_set_input {
  created_at: timestamptz
  created_by: String

  """Lower is more prioritized. default is 10"""
  priority: Int
  sid: Int
  transcript_acc_num_full: String
  uid: uuid
  updated_at: timestamptz
  updated_by: String
}

"""aggregate stddev on columns"""
type oncodna_transcript_priority_stddev_fields {
  """Lower is more prioritized. default is 10"""
  priority: Float
  sid: Float
}

"""aggregate stddev_pop on columns"""
type oncodna_transcript_priority_stddev_pop_fields {
  """Lower is more prioritized. default is 10"""
  priority: Float
  sid: Float
}

"""aggregate stddev_samp on columns"""
type oncodna_transcript_priority_stddev_samp_fields {
  """Lower is more prioritized. default is 10"""
  priority: Float
  sid: Float
}

"""
Streaming cursor of the table "oncodna_transcript_priority"
"""
input oncodna_transcript_priority_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: oncodna_transcript_priority_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input oncodna_transcript_priority_stream_cursor_value_input {
  created_at: timestamptz
  created_by: String

  """Lower is more prioritized. default is 10"""
  priority: Int
  sid: Int
  transcript_acc_num_full: String
  uid: uuid
  updated_at: timestamptz
  updated_by: String
}

"""aggregate sum on columns"""
type oncodna_transcript_priority_sum_fields {
  """Lower is more prioritized. default is 10"""
  priority: Int
  sid: Int
}

"""
update columns of table "oncodna_transcript_priority"
"""
enum oncodna_transcript_priority_update_column {
  """column name"""
  created_at

  """column name"""
  created_by

  """column name"""
  priority

  """column name"""
  sid

  """column name"""
  transcript_acc_num_full

  """column name"""
  uid

  """column name"""
  updated_at

  """column name"""
  updated_by
}

input oncodna_transcript_priority_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: oncodna_transcript_priority_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: oncodna_transcript_priority_set_input

  """filter the rows which have to be updated"""
  where: oncodna_transcript_priority_bool_exp!
}

"""aggregate var_pop on columns"""
type oncodna_transcript_priority_var_pop_fields {
  """Lower is more prioritized. default is 10"""
  priority: Float
  sid: Float
}

"""aggregate var_samp on columns"""
type oncodna_transcript_priority_var_samp_fields {
  """Lower is more prioritized. default is 10"""
  priority: Float
  sid: Float
}

"""aggregate variance on columns"""
type oncodna_transcript_priority_variance_fields {
  """Lower is more prioritized. default is 10"""
  priority: Float
  sid: Float
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "protein"
"""
type protein {
  acc_num_base: String
  acc_num_full: String
  acc_num_version: String
  attributes(
    """JSON select path"""
    path: String
  ): jsonb

  """An object relationship"""
  provider: provider!
  provider_code: String!
  sid: Int!

  """An array relationship"""
  transcripts(
    """distinct select on columns"""
    distinct_on: [transcript_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transcript_order_by!]

    """filter the rows returned"""
    where: transcript_bool_exp
  ): [transcript!]!

  """An aggregate relationship"""
  transcripts_aggregate(
    """distinct select on columns"""
    distinct_on: [transcript_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transcript_order_by!]

    """filter the rows returned"""
    where: transcript_bool_exp
  ): transcript_aggregate!
  uid: uuid
}

"""
aggregated selection of "protein"
"""
type protein_aggregate {
  aggregate: protein_aggregate_fields
  nodes: [protein!]!
}

"""
aggregate fields of "protein"
"""
type protein_aggregate_fields {
  avg: protein_avg_fields
  count(columns: [protein_select_column!], distinct: Boolean): Int!
  max: protein_max_fields
  min: protein_min_fields
  stddev: protein_stddev_fields
  stddev_pop: protein_stddev_pop_fields
  stddev_samp: protein_stddev_samp_fields
  sum: protein_sum_fields
  var_pop: protein_var_pop_fields
  var_samp: protein_var_samp_fields
  variance: protein_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input protein_append_input {
  attributes: jsonb
}

"""aggregate avg on columns"""
type protein_avg_fields {
  sid: Float
}

"""
Boolean expression to filter rows from the table "protein". All fields are combined with a logical 'AND'.
"""
input protein_bool_exp {
  _and: [protein_bool_exp!]
  _not: protein_bool_exp
  _or: [protein_bool_exp!]
  acc_num_base: String_comparison_exp
  acc_num_full: String_comparison_exp
  acc_num_version: String_comparison_exp
  attributes: jsonb_comparison_exp
  provider: provider_bool_exp
  provider_code: String_comparison_exp
  sid: Int_comparison_exp
  transcripts: transcript_bool_exp
  transcripts_aggregate: transcript_aggregate_bool_exp
  uid: uuid_comparison_exp
}

"""
unique or primary key constraints on table "protein"
"""
enum protein_constraint {
  """
  unique or primary key constraint on columns "sid"
  """
  protein_pkey

  """
  unique or primary key constraint on columns "uid"
  """
  protein_uid_key
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input protein_delete_at_path_input {
  attributes: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input protein_delete_elem_input {
  attributes: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input protein_delete_key_input {
  attributes: String
}

"""
input type for incrementing numeric columns in table "protein"
"""
input protein_inc_input {
  sid: Int
}

"""
input type for inserting data into table "protein"
"""
input protein_insert_input {
  acc_num_base: String
  acc_num_full: String
  acc_num_version: String
  attributes: jsonb
  provider: provider_obj_rel_insert_input
  provider_code: String
  sid: Int
  transcripts: transcript_arr_rel_insert_input
  uid: uuid
}

"""aggregate max on columns"""
type protein_max_fields {
  acc_num_base: String
  acc_num_full: String
  acc_num_version: String
  provider_code: String
  sid: Int
  uid: uuid
}

"""aggregate min on columns"""
type protein_min_fields {
  acc_num_base: String
  acc_num_full: String
  acc_num_version: String
  provider_code: String
  sid: Int
  uid: uuid
}

"""
response of any mutation on the table "protein"
"""
type protein_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [protein!]!
}

"""
input type for inserting object relation for remote table "protein"
"""
input protein_obj_rel_insert_input {
  data: protein_insert_input!

  """upsert condition"""
  on_conflict: protein_on_conflict
}

"""
on_conflict condition type for table "protein"
"""
input protein_on_conflict {
  constraint: protein_constraint!
  update_columns: [protein_update_column!]! = []
  where: protein_bool_exp
}

"""Ordering options when selecting data from "protein"."""
input protein_order_by {
  acc_num_base: order_by
  acc_num_full: order_by
  acc_num_version: order_by
  attributes: order_by
  provider: provider_order_by
  provider_code: order_by
  sid: order_by
  transcripts_aggregate: transcript_aggregate_order_by
  uid: order_by
}

"""primary key columns input for table: protein"""
input protein_pk_columns_input {
  sid: Int!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input protein_prepend_input {
  attributes: jsonb
}

"""
select columns of table "protein"
"""
enum protein_select_column {
  """column name"""
  acc_num_base

  """column name"""
  acc_num_full

  """column name"""
  acc_num_version

  """column name"""
  attributes

  """column name"""
  provider_code

  """column name"""
  sid

  """column name"""
  uid
}

"""
input type for updating data in table "protein"
"""
input protein_set_input {
  acc_num_base: String
  acc_num_full: String
  acc_num_version: String
  attributes: jsonb
  provider_code: String
  sid: Int
  uid: uuid
}

"""aggregate stddev on columns"""
type protein_stddev_fields {
  sid: Float
}

"""aggregate stddev_pop on columns"""
type protein_stddev_pop_fields {
  sid: Float
}

"""aggregate stddev_samp on columns"""
type protein_stddev_samp_fields {
  sid: Float
}

"""
Streaming cursor of the table "protein"
"""
input protein_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: protein_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input protein_stream_cursor_value_input {
  acc_num_base: String
  acc_num_full: String
  acc_num_version: String
  attributes: jsonb
  provider_code: String
  sid: Int
  uid: uuid
}

"""aggregate sum on columns"""
type protein_sum_fields {
  sid: Int
}

"""
update columns of table "protein"
"""
enum protein_update_column {
  """column name"""
  acc_num_base

  """column name"""
  acc_num_full

  """column name"""
  acc_num_version

  """column name"""
  attributes

  """column name"""
  provider_code

  """column name"""
  sid

  """column name"""
  uid
}

input protein_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: protein_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: protein_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: protein_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: protein_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: protein_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: protein_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: protein_set_input

  """filter the rows which have to be updated"""
  where: protein_bool_exp!
}

"""aggregate var_pop on columns"""
type protein_var_pop_fields {
  sid: Float
}

"""aggregate var_samp on columns"""
type protein_var_samp_fields {
  sid: Float
}

"""aggregate variance on columns"""
type protein_variance_fields {
  sid: Float
}

"""
columns and relationships of "provider"
"""
type provider {
  attributes(
    """JSON select path"""
    path: String
  ): jsonb
  code: String
  created_at: timestamptz
  description: String
  external_database_name: String
  is_active: Boolean!
  is_main: Boolean!
  is_oncoit: Boolean!
  is_preview: Boolean!

  """The level represents the order of the provider, similar to the sid"""
  level: Int
  name: String
  reference_genome: reference_genome
  sid: Int!
  uid: uuid
}

"""
aggregated selection of "provider"
"""
type provider_aggregate {
  aggregate: provider_aggregate_fields
  nodes: [provider!]!
}

"""
aggregate fields of "provider"
"""
type provider_aggregate_fields {
  avg: provider_avg_fields
  count(columns: [provider_select_column!], distinct: Boolean): Int!
  max: provider_max_fields
  min: provider_min_fields
  stddev: provider_stddev_fields
  stddev_pop: provider_stddev_pop_fields
  stddev_samp: provider_stddev_samp_fields
  sum: provider_sum_fields
  var_pop: provider_var_pop_fields
  var_samp: provider_var_samp_fields
  variance: provider_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input provider_append_input {
  attributes: jsonb
}

"""aggregate avg on columns"""
type provider_avg_fields {
  """The level represents the order of the provider, similar to the sid"""
  level: Float
  sid: Float
}

"""
Boolean expression to filter rows from the table "provider". All fields are combined with a logical 'AND'.
"""
input provider_bool_exp {
  _and: [provider_bool_exp!]
  _not: provider_bool_exp
  _or: [provider_bool_exp!]
  attributes: jsonb_comparison_exp
  code: String_comparison_exp
  created_at: timestamptz_comparison_exp
  description: String_comparison_exp
  external_database_name: String_comparison_exp
  is_active: Boolean_comparison_exp
  is_main: Boolean_comparison_exp
  is_oncoit: Boolean_comparison_exp
  is_preview: Boolean_comparison_exp
  level: Int_comparison_exp
  name: String_comparison_exp
  reference_genome: reference_genome_comparison_exp
  sid: Int_comparison_exp
  uid: uuid_comparison_exp
}

"""
unique or primary key constraints on table "provider"
"""
enum provider_constraint {
  """
  unique or primary key constraint on columns "code"
  """
  provider_code_key

  """
  unique or primary key constraint on columns "level"
  """
  provider_level_key

  """
  unique or primary key constraint on columns "name"
  """
  provider_name_key

  """
  unique or primary key constraint on columns "sid"
  """
  provider_pkey

  """
  unique or primary key constraint on columns "uid"
  """
  provider_uid_key
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input provider_delete_at_path_input {
  attributes: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input provider_delete_elem_input {
  attributes: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input provider_delete_key_input {
  attributes: String
}

"""
input type for incrementing numeric columns in table "provider"
"""
input provider_inc_input {
  """The level represents the order of the provider, similar to the sid"""
  level: Int
  sid: Int
}

"""
input type for inserting data into table "provider"
"""
input provider_insert_input {
  attributes: jsonb
  code: String
  created_at: timestamptz
  description: String
  external_database_name: String
  is_active: Boolean
  is_main: Boolean
  is_oncoit: Boolean
  is_preview: Boolean

  """The level represents the order of the provider, similar to the sid"""
  level: Int
  name: String
  reference_genome: reference_genome
  sid: Int
  uid: uuid
}

"""aggregate max on columns"""
type provider_max_fields {
  code: String
  created_at: timestamptz
  description: String
  external_database_name: String

  """The level represents the order of the provider, similar to the sid"""
  level: Int
  name: String
  reference_genome: reference_genome
  sid: Int
  uid: uuid
}

"""aggregate min on columns"""
type provider_min_fields {
  code: String
  created_at: timestamptz
  description: String
  external_database_name: String

  """The level represents the order of the provider, similar to the sid"""
  level: Int
  name: String
  reference_genome: reference_genome
  sid: Int
  uid: uuid
}

"""
response of any mutation on the table "provider"
"""
type provider_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [provider!]!
}

"""
input type for inserting object relation for remote table "provider"
"""
input provider_obj_rel_insert_input {
  data: provider_insert_input!

  """upsert condition"""
  on_conflict: provider_on_conflict
}

"""
on_conflict condition type for table "provider"
"""
input provider_on_conflict {
  constraint: provider_constraint!
  update_columns: [provider_update_column!]! = []
  where: provider_bool_exp
}

"""Ordering options when selecting data from "provider"."""
input provider_order_by {
  attributes: order_by
  code: order_by
  created_at: order_by
  description: order_by
  external_database_name: order_by
  is_active: order_by
  is_main: order_by
  is_oncoit: order_by
  is_preview: order_by
  level: order_by
  name: order_by
  reference_genome: order_by
  sid: order_by
  uid: order_by
}

"""primary key columns input for table: provider"""
input provider_pk_columns_input {
  sid: Int!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input provider_prepend_input {
  attributes: jsonb
}

"""
select columns of table "provider"
"""
enum provider_select_column {
  """column name"""
  attributes

  """column name"""
  code

  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  external_database_name

  """column name"""
  is_active

  """column name"""
  is_main

  """column name"""
  is_oncoit

  """column name"""
  is_preview

  """column name"""
  level

  """column name"""
  name

  """column name"""
  reference_genome

  """column name"""
  sid

  """column name"""
  uid
}

"""
input type for updating data in table "provider"
"""
input provider_set_input {
  attributes: jsonb
  code: String
  created_at: timestamptz
  description: String
  external_database_name: String
  is_active: Boolean
  is_main: Boolean
  is_oncoit: Boolean
  is_preview: Boolean

  """The level represents the order of the provider, similar to the sid"""
  level: Int
  name: String
  reference_genome: reference_genome
  sid: Int
  uid: uuid
}

"""aggregate stddev on columns"""
type provider_stddev_fields {
  """The level represents the order of the provider, similar to the sid"""
  level: Float
  sid: Float
}

"""aggregate stddev_pop on columns"""
type provider_stddev_pop_fields {
  """The level represents the order of the provider, similar to the sid"""
  level: Float
  sid: Float
}

"""aggregate stddev_samp on columns"""
type provider_stddev_samp_fields {
  """The level represents the order of the provider, similar to the sid"""
  level: Float
  sid: Float
}

"""
Streaming cursor of the table "provider"
"""
input provider_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: provider_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input provider_stream_cursor_value_input {
  attributes: jsonb
  code: String
  created_at: timestamptz
  description: String
  external_database_name: String
  is_active: Boolean
  is_main: Boolean
  is_oncoit: Boolean
  is_preview: Boolean

  """The level represents the order of the provider, similar to the sid"""
  level: Int
  name: String
  reference_genome: reference_genome
  sid: Int
  uid: uuid
}

"""aggregate sum on columns"""
type provider_sum_fields {
  """The level represents the order of the provider, similar to the sid"""
  level: Int
  sid: Int
}

"""
update columns of table "provider"
"""
enum provider_update_column {
  """column name"""
  attributes

  """column name"""
  code

  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  external_database_name

  """column name"""
  is_active

  """column name"""
  is_main

  """column name"""
  is_oncoit

  """column name"""
  is_preview

  """column name"""
  level

  """column name"""
  name

  """column name"""
  reference_genome

  """column name"""
  sid

  """column name"""
  uid
}

input provider_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: provider_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: provider_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: provider_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: provider_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: provider_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: provider_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: provider_set_input

  """filter the rows which have to be updated"""
  where: provider_bool_exp!
}

"""aggregate var_pop on columns"""
type provider_var_pop_fields {
  """The level represents the order of the provider, similar to the sid"""
  level: Float
  sid: Float
}

"""aggregate var_samp on columns"""
type provider_var_samp_fields {
  """The level represents the order of the provider, similar to the sid"""
  level: Float
  sid: Float
}

"""aggregate variance on columns"""
type provider_variance_fields {
  """The level represents the order of the provider, similar to the sid"""
  level: Float
  sid: Float
}

type query_root {
  """
  fetch data from the table: "appris_mv"
  """
  appris_mv(
    """distinct select on columns"""
    distinct_on: [appris_mv_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [appris_mv_order_by!]

    """filter the rows returned"""
    where: appris_mv_bool_exp
  ): [appris_mv!]!

  """
  fetch aggregated fields from the table: "appris_mv"
  """
  appris_mv_aggregate(
    """distinct select on columns"""
    distinct_on: [appris_mv_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [appris_mv_order_by!]

    """filter the rows returned"""
    where: appris_mv_bool_exp
  ): appris_mv_aggregate!

  """
  fetch data from the table: "clinvar_mv"
  """
  clinvar_mv(
    """distinct select on columns"""
    distinct_on: [clinvar_mv_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [clinvar_mv_order_by!]

    """filter the rows returned"""
    where: clinvar_mv_bool_exp
  ): [clinvar_mv!]!

  """
  fetch aggregated fields from the table: "clinvar_mv"
  """
  clinvar_mv_aggregate(
    """distinct select on columns"""
    distinct_on: [clinvar_mv_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [clinvar_mv_order_by!]

    """filter the rows returned"""
    where: clinvar_mv_bool_exp
  ): clinvar_mv_aggregate!

  """
  fetch data from the table: "compermed_oncogene_ts"
  """
  compermed_oncogene_ts(
    """distinct select on columns"""
    distinct_on: [compermed_oncogene_ts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [compermed_oncogene_ts_order_by!]

    """filter the rows returned"""
    where: compermed_oncogene_ts_bool_exp
  ): [compermed_oncogene_ts!]!

  """
  fetch aggregated fields from the table: "compermed_oncogene_ts"
  """
  compermed_oncogene_ts_aggregate(
    """distinct select on columns"""
    distinct_on: [compermed_oncogene_ts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [compermed_oncogene_ts_order_by!]

    """filter the rows returned"""
    where: compermed_oncogene_ts_bool_exp
  ): compermed_oncogene_ts_aggregate!

  """
  fetch data from the table: "compermed_oncogene_ts" using primary key columns
  """
  compermed_oncogene_ts_by_pk(sid: Int!): compermed_oncogene_ts

  """
  fetch data from the table: "exon"
  """
  exon(
    """distinct select on columns"""
    distinct_on: [exon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [exon_order_by!]

    """filter the rows returned"""
    where: exon_bool_exp
  ): [exon!]!

  """
  fetch aggregated fields from the table: "exon"
  """
  exon_aggregate(
    """distinct select on columns"""
    distinct_on: [exon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [exon_order_by!]

    """filter the rows returned"""
    where: exon_bool_exp
  ): exon_aggregate!

  """fetch data from the table: "exon" using primary key columns"""
  exon_by_pk(sid: Int!): exon

  """
  fetch data from the table: "gene"
  """
  gene(
    """distinct select on columns"""
    distinct_on: [gene_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gene_order_by!]

    """filter the rows returned"""
    where: gene_bool_exp
  ): [gene!]!

  """
  fetch aggregated fields from the table: "gene"
  """
  gene_aggregate(
    """distinct select on columns"""
    distinct_on: [gene_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gene_order_by!]

    """filter the rows returned"""
    where: gene_bool_exp
  ): gene_aggregate!

  """fetch data from the table: "gene" using primary key columns"""
  gene_by_pk(sid: Int!): gene

  """
  fetch data from the table: "hugo_mv"
  """
  hugo_mv(
    """distinct select on columns"""
    distinct_on: [hugo_mv_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [hugo_mv_order_by!]

    """filter the rows returned"""
    where: hugo_mv_bool_exp
  ): [hugo_mv!]!

  """
  fetch aggregated fields from the table: "hugo_mv"
  """
  hugo_mv_aggregate(
    """distinct select on columns"""
    distinct_on: [hugo_mv_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [hugo_mv_order_by!]

    """filter the rows returned"""
    where: hugo_mv_bool_exp
  ): hugo_mv_aggregate!

  """An array relationship"""
  impact(
    """distinct select on columns"""
    distinct_on: [impact_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [impact_order_by!]

    """filter the rows returned"""
    where: impact_bool_exp
  ): [impact!]!

  """An aggregate relationship"""
  impact_aggregate(
    """distinct select on columns"""
    distinct_on: [impact_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [impact_order_by!]

    """filter the rows returned"""
    where: impact_bool_exp
  ): impact_aggregate!

  """fetch data from the table: "impact" using primary key columns"""
  impact_by_pk(sid: Int!): impact

  """An array relationship"""
  main_impact(
    """distinct select on columns"""
    distinct_on: [main_impact_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [main_impact_order_by!]

    """filter the rows returned"""
    where: main_impact_bool_exp
  ): [main_impact!]!

  """An aggregate relationship"""
  main_impact_aggregate(
    """distinct select on columns"""
    distinct_on: [main_impact_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [main_impact_order_by!]

    """filter the rows returned"""
    where: main_impact_bool_exp
  ): main_impact_aggregate!

  """fetch data from the table: "main_impact" using primary key columns"""
  main_impact_by_pk(sid: Int!): main_impact

  """
  fetch data from the table: "mane_mv"
  """
  mane_mv(
    """distinct select on columns"""
    distinct_on: [mane_mv_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mane_mv_order_by!]

    """filter the rows returned"""
    where: mane_mv_bool_exp
  ): [mane_mv!]!

  """
  fetch aggregated fields from the table: "mane_mv"
  """
  mane_mv_aggregate(
    """distinct select on columns"""
    distinct_on: [mane_mv_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mane_mv_order_by!]

    """filter the rows returned"""
    where: mane_mv_bool_exp
  ): mane_mv_aggregate!

  """
  fetch data from the table: "migration"
  """
  migration(
    """distinct select on columns"""
    distinct_on: [migration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [migration_order_by!]

    """filter the rows returned"""
    where: migration_bool_exp
  ): [migration!]!

  """
  fetch aggregated fields from the table: "migration"
  """
  migration_aggregate(
    """distinct select on columns"""
    distinct_on: [migration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [migration_order_by!]

    """filter the rows returned"""
    where: migration_bool_exp
  ): migration_aggregate!

  """
  fetch data from the table: "oncodna_gene_panel"
  """
  oncodna_gene_panel(
    """distinct select on columns"""
    distinct_on: [oncodna_gene_panel_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [oncodna_gene_panel_order_by!]

    """filter the rows returned"""
    where: oncodna_gene_panel_bool_exp
  ): [oncodna_gene_panel!]!

  """
  fetch aggregated fields from the table: "oncodna_gene_panel"
  """
  oncodna_gene_panel_aggregate(
    """distinct select on columns"""
    distinct_on: [oncodna_gene_panel_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [oncodna_gene_panel_order_by!]

    """filter the rows returned"""
    where: oncodna_gene_panel_bool_exp
  ): oncodna_gene_panel_aggregate!

  """
  fetch data from the table: "oncodna_gene_panel" using primary key columns
  """
  oncodna_gene_panel_by_pk(sid: Int!): oncodna_gene_panel

  """
  fetch data from the table: "oncodna_gene_priority"
  """
  oncodna_gene_priority(
    """distinct select on columns"""
    distinct_on: [oncodna_gene_priority_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [oncodna_gene_priority_order_by!]

    """filter the rows returned"""
    where: oncodna_gene_priority_bool_exp
  ): [oncodna_gene_priority!]!

  """
  fetch aggregated fields from the table: "oncodna_gene_priority"
  """
  oncodna_gene_priority_aggregate(
    """distinct select on columns"""
    distinct_on: [oncodna_gene_priority_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [oncodna_gene_priority_order_by!]

    """filter the rows returned"""
    where: oncodna_gene_priority_bool_exp
  ): oncodna_gene_priority_aggregate!

  """
  fetch data from the table: "oncodna_gene_priority" using primary key columns
  """
  oncodna_gene_priority_by_pk(sid: Int!): oncodna_gene_priority

  """
  fetch data from the table: "oncodna_overridden_impact"
  """
  oncodna_overridden_impact(
    """distinct select on columns"""
    distinct_on: [oncodna_overridden_impact_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [oncodna_overridden_impact_order_by!]

    """filter the rows returned"""
    where: oncodna_overridden_impact_bool_exp
  ): [oncodna_overridden_impact!]!

  """
  fetch aggregated fields from the table: "oncodna_overridden_impact"
  """
  oncodna_overridden_impact_aggregate(
    """distinct select on columns"""
    distinct_on: [oncodna_overridden_impact_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [oncodna_overridden_impact_order_by!]

    """filter the rows returned"""
    where: oncodna_overridden_impact_bool_exp
  ): oncodna_overridden_impact_aggregate!

  """
  fetch data from the table: "oncodna_overridden_impact" using primary key columns
  """
  oncodna_overridden_impact_by_pk(sid: Int!): oncodna_overridden_impact

  """
  fetch data from the table: "oncodna_transcript_priority"
  """
  oncodna_transcript_priority(
    """distinct select on columns"""
    distinct_on: [oncodna_transcript_priority_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [oncodna_transcript_priority_order_by!]

    """filter the rows returned"""
    where: oncodna_transcript_priority_bool_exp
  ): [oncodna_transcript_priority!]!

  """
  fetch aggregated fields from the table: "oncodna_transcript_priority"
  """
  oncodna_transcript_priority_aggregate(
    """distinct select on columns"""
    distinct_on: [oncodna_transcript_priority_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [oncodna_transcript_priority_order_by!]

    """filter the rows returned"""
    where: oncodna_transcript_priority_bool_exp
  ): oncodna_transcript_priority_aggregate!

  """
  fetch data from the table: "oncodna_transcript_priority" using primary key columns
  """
  oncodna_transcript_priority_by_pk(sid: Int!): oncodna_transcript_priority

  """
  fetch data from the table: "protein"
  """
  protein(
    """distinct select on columns"""
    distinct_on: [protein_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [protein_order_by!]

    """filter the rows returned"""
    where: protein_bool_exp
  ): [protein!]!

  """
  fetch aggregated fields from the table: "protein"
  """
  protein_aggregate(
    """distinct select on columns"""
    distinct_on: [protein_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [protein_order_by!]

    """filter the rows returned"""
    where: protein_bool_exp
  ): protein_aggregate!

  """fetch data from the table: "protein" using primary key columns"""
  protein_by_pk(sid: Int!): protein

  """
  fetch data from the table: "provider"
  """
  provider(
    """distinct select on columns"""
    distinct_on: [provider_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [provider_order_by!]

    """filter the rows returned"""
    where: provider_bool_exp
  ): [provider!]!

  """
  fetch aggregated fields from the table: "provider"
  """
  provider_aggregate(
    """distinct select on columns"""
    distinct_on: [provider_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [provider_order_by!]

    """filter the rows returned"""
    where: provider_bool_exp
  ): provider_aggregate!

  """fetch data from the table: "provider" using primary key columns"""
  provider_by_pk(sid: Int!): provider

  """
  fetch data from the table: "task"
  """
  task(
    """distinct select on columns"""
    distinct_on: [task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_order_by!]

    """filter the rows returned"""
    where: task_bool_exp
  ): [task!]!

  """
  fetch aggregated fields from the table: "task"
  """
  task_aggregate(
    """distinct select on columns"""
    distinct_on: [task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_order_by!]

    """filter the rows returned"""
    where: task_bool_exp
  ): task_aggregate!

  """fetch data from the table: "task" using primary key columns"""
  task_by_pk(sid: Int!): task

  """
  fetch data from the table: "transcript"
  """
  transcript(
    """distinct select on columns"""
    distinct_on: [transcript_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transcript_order_by!]

    """filter the rows returned"""
    where: transcript_bool_exp
  ): [transcript!]!

  """
  fetch aggregated fields from the table: "transcript"
  """
  transcript_aggregate(
    """distinct select on columns"""
    distinct_on: [transcript_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transcript_order_by!]

    """filter the rows returned"""
    where: transcript_bool_exp
  ): transcript_aggregate!

  """fetch data from the table: "transcript" using primary key columns"""
  transcript_by_pk(sid: Int!): transcript

  """
  fetch data from the table: "user_action"
  """
  user_action(
    """distinct select on columns"""
    distinct_on: [user_action_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_action_order_by!]

    """filter the rows returned"""
    where: user_action_bool_exp
  ): [user_action!]!

  """
  fetch aggregated fields from the table: "user_action"
  """
  user_action_aggregate(
    """distinct select on columns"""
    distinct_on: [user_action_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_action_order_by!]

    """filter the rows returned"""
    where: user_action_bool_exp
  ): user_action_aggregate!

  """
  fetch data from the table: "variant"
  """
  variant(
    """distinct select on columns"""
    distinct_on: [variant_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [variant_order_by!]

    """filter the rows returned"""
    where: variant_bool_exp
  ): [variant!]!

  """
  fetch aggregated fields from the table: "variant"
  """
  variant_aggregate(
    """distinct select on columns"""
    distinct_on: [variant_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [variant_order_by!]

    """filter the rows returned"""
    where: variant_bool_exp
  ): variant_aggregate!

  """fetch data from the table: "variant" using primary key columns"""
  variant_by_pk(sid: Int!): variant
}

scalar reference_genome

"""
Boolean expression to compare columns of type "reference_genome". All fields are combined with logical 'AND'.
"""
input reference_genome_comparison_exp {
  _eq: reference_genome
  _gt: reference_genome
  _gte: reference_genome
  _in: [reference_genome!]
  _is_null: Boolean
  _lt: reference_genome
  _lte: reference_genome
  _neq: reference_genome
  _nin: [reference_genome!]
}

type subscription_root {
  """
  fetch data from the table: "appris_mv"
  """
  appris_mv(
    """distinct select on columns"""
    distinct_on: [appris_mv_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [appris_mv_order_by!]

    """filter the rows returned"""
    where: appris_mv_bool_exp
  ): [appris_mv!]!

  """
  fetch aggregated fields from the table: "appris_mv"
  """
  appris_mv_aggregate(
    """distinct select on columns"""
    distinct_on: [appris_mv_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [appris_mv_order_by!]

    """filter the rows returned"""
    where: appris_mv_bool_exp
  ): appris_mv_aggregate!

  """
  fetch data from the table in a streaming manner: "appris_mv"
  """
  appris_mv_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [appris_mv_stream_cursor_input]!

    """filter the rows returned"""
    where: appris_mv_bool_exp
  ): [appris_mv!]!

  """
  fetch data from the table: "clinvar_mv"
  """
  clinvar_mv(
    """distinct select on columns"""
    distinct_on: [clinvar_mv_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [clinvar_mv_order_by!]

    """filter the rows returned"""
    where: clinvar_mv_bool_exp
  ): [clinvar_mv!]!

  """
  fetch aggregated fields from the table: "clinvar_mv"
  """
  clinvar_mv_aggregate(
    """distinct select on columns"""
    distinct_on: [clinvar_mv_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [clinvar_mv_order_by!]

    """filter the rows returned"""
    where: clinvar_mv_bool_exp
  ): clinvar_mv_aggregate!

  """
  fetch data from the table in a streaming manner: "clinvar_mv"
  """
  clinvar_mv_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [clinvar_mv_stream_cursor_input]!

    """filter the rows returned"""
    where: clinvar_mv_bool_exp
  ): [clinvar_mv!]!

  """
  fetch data from the table: "compermed_oncogene_ts"
  """
  compermed_oncogene_ts(
    """distinct select on columns"""
    distinct_on: [compermed_oncogene_ts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [compermed_oncogene_ts_order_by!]

    """filter the rows returned"""
    where: compermed_oncogene_ts_bool_exp
  ): [compermed_oncogene_ts!]!

  """
  fetch aggregated fields from the table: "compermed_oncogene_ts"
  """
  compermed_oncogene_ts_aggregate(
    """distinct select on columns"""
    distinct_on: [compermed_oncogene_ts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [compermed_oncogene_ts_order_by!]

    """filter the rows returned"""
    where: compermed_oncogene_ts_bool_exp
  ): compermed_oncogene_ts_aggregate!

  """
  fetch data from the table: "compermed_oncogene_ts" using primary key columns
  """
  compermed_oncogene_ts_by_pk(sid: Int!): compermed_oncogene_ts

  """
  fetch data from the table in a streaming manner: "compermed_oncogene_ts"
  """
  compermed_oncogene_ts_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [compermed_oncogene_ts_stream_cursor_input]!

    """filter the rows returned"""
    where: compermed_oncogene_ts_bool_exp
  ): [compermed_oncogene_ts!]!

  """
  fetch data from the table: "exon"
  """
  exon(
    """distinct select on columns"""
    distinct_on: [exon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [exon_order_by!]

    """filter the rows returned"""
    where: exon_bool_exp
  ): [exon!]!

  """
  fetch aggregated fields from the table: "exon"
  """
  exon_aggregate(
    """distinct select on columns"""
    distinct_on: [exon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [exon_order_by!]

    """filter the rows returned"""
    where: exon_bool_exp
  ): exon_aggregate!

  """fetch data from the table: "exon" using primary key columns"""
  exon_by_pk(sid: Int!): exon

  """
  fetch data from the table in a streaming manner: "exon"
  """
  exon_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [exon_stream_cursor_input]!

    """filter the rows returned"""
    where: exon_bool_exp
  ): [exon!]!

  """
  fetch data from the table: "gene"
  """
  gene(
    """distinct select on columns"""
    distinct_on: [gene_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gene_order_by!]

    """filter the rows returned"""
    where: gene_bool_exp
  ): [gene!]!

  """
  fetch aggregated fields from the table: "gene"
  """
  gene_aggregate(
    """distinct select on columns"""
    distinct_on: [gene_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gene_order_by!]

    """filter the rows returned"""
    where: gene_bool_exp
  ): gene_aggregate!

  """fetch data from the table: "gene" using primary key columns"""
  gene_by_pk(sid: Int!): gene

  """
  fetch data from the table in a streaming manner: "gene"
  """
  gene_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [gene_stream_cursor_input]!

    """filter the rows returned"""
    where: gene_bool_exp
  ): [gene!]!

  """
  fetch data from the table: "hugo_mv"
  """
  hugo_mv(
    """distinct select on columns"""
    distinct_on: [hugo_mv_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [hugo_mv_order_by!]

    """filter the rows returned"""
    where: hugo_mv_bool_exp
  ): [hugo_mv!]!

  """
  fetch aggregated fields from the table: "hugo_mv"
  """
  hugo_mv_aggregate(
    """distinct select on columns"""
    distinct_on: [hugo_mv_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [hugo_mv_order_by!]

    """filter the rows returned"""
    where: hugo_mv_bool_exp
  ): hugo_mv_aggregate!

  """
  fetch data from the table in a streaming manner: "hugo_mv"
  """
  hugo_mv_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [hugo_mv_stream_cursor_input]!

    """filter the rows returned"""
    where: hugo_mv_bool_exp
  ): [hugo_mv!]!

  """An array relationship"""
  impact(
    """distinct select on columns"""
    distinct_on: [impact_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [impact_order_by!]

    """filter the rows returned"""
    where: impact_bool_exp
  ): [impact!]!

  """An aggregate relationship"""
  impact_aggregate(
    """distinct select on columns"""
    distinct_on: [impact_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [impact_order_by!]

    """filter the rows returned"""
    where: impact_bool_exp
  ): impact_aggregate!

  """fetch data from the table: "impact" using primary key columns"""
  impact_by_pk(sid: Int!): impact

  """
  fetch data from the table in a streaming manner: "impact"
  """
  impact_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [impact_stream_cursor_input]!

    """filter the rows returned"""
    where: impact_bool_exp
  ): [impact!]!

  """An array relationship"""
  main_impact(
    """distinct select on columns"""
    distinct_on: [main_impact_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [main_impact_order_by!]

    """filter the rows returned"""
    where: main_impact_bool_exp
  ): [main_impact!]!

  """An aggregate relationship"""
  main_impact_aggregate(
    """distinct select on columns"""
    distinct_on: [main_impact_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [main_impact_order_by!]

    """filter the rows returned"""
    where: main_impact_bool_exp
  ): main_impact_aggregate!

  """fetch data from the table: "main_impact" using primary key columns"""
  main_impact_by_pk(sid: Int!): main_impact

  """
  fetch data from the table in a streaming manner: "main_impact"
  """
  main_impact_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [main_impact_stream_cursor_input]!

    """filter the rows returned"""
    where: main_impact_bool_exp
  ): [main_impact!]!

  """
  fetch data from the table: "mane_mv"
  """
  mane_mv(
    """distinct select on columns"""
    distinct_on: [mane_mv_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mane_mv_order_by!]

    """filter the rows returned"""
    where: mane_mv_bool_exp
  ): [mane_mv!]!

  """
  fetch aggregated fields from the table: "mane_mv"
  """
  mane_mv_aggregate(
    """distinct select on columns"""
    distinct_on: [mane_mv_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mane_mv_order_by!]

    """filter the rows returned"""
    where: mane_mv_bool_exp
  ): mane_mv_aggregate!

  """
  fetch data from the table in a streaming manner: "mane_mv"
  """
  mane_mv_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [mane_mv_stream_cursor_input]!

    """filter the rows returned"""
    where: mane_mv_bool_exp
  ): [mane_mv!]!

  """
  fetch data from the table: "migration"
  """
  migration(
    """distinct select on columns"""
    distinct_on: [migration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [migration_order_by!]

    """filter the rows returned"""
    where: migration_bool_exp
  ): [migration!]!

  """
  fetch aggregated fields from the table: "migration"
  """
  migration_aggregate(
    """distinct select on columns"""
    distinct_on: [migration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [migration_order_by!]

    """filter the rows returned"""
    where: migration_bool_exp
  ): migration_aggregate!

  """
  fetch data from the table in a streaming manner: "migration"
  """
  migration_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [migration_stream_cursor_input]!

    """filter the rows returned"""
    where: migration_bool_exp
  ): [migration!]!

  """
  fetch data from the table: "oncodna_gene_panel"
  """
  oncodna_gene_panel(
    """distinct select on columns"""
    distinct_on: [oncodna_gene_panel_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [oncodna_gene_panel_order_by!]

    """filter the rows returned"""
    where: oncodna_gene_panel_bool_exp
  ): [oncodna_gene_panel!]!

  """
  fetch aggregated fields from the table: "oncodna_gene_panel"
  """
  oncodna_gene_panel_aggregate(
    """distinct select on columns"""
    distinct_on: [oncodna_gene_panel_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [oncodna_gene_panel_order_by!]

    """filter the rows returned"""
    where: oncodna_gene_panel_bool_exp
  ): oncodna_gene_panel_aggregate!

  """
  fetch data from the table: "oncodna_gene_panel" using primary key columns
  """
  oncodna_gene_panel_by_pk(sid: Int!): oncodna_gene_panel

  """
  fetch data from the table in a streaming manner: "oncodna_gene_panel"
  """
  oncodna_gene_panel_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [oncodna_gene_panel_stream_cursor_input]!

    """filter the rows returned"""
    where: oncodna_gene_panel_bool_exp
  ): [oncodna_gene_panel!]!

  """
  fetch data from the table: "oncodna_gene_priority"
  """
  oncodna_gene_priority(
    """distinct select on columns"""
    distinct_on: [oncodna_gene_priority_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [oncodna_gene_priority_order_by!]

    """filter the rows returned"""
    where: oncodna_gene_priority_bool_exp
  ): [oncodna_gene_priority!]!

  """
  fetch aggregated fields from the table: "oncodna_gene_priority"
  """
  oncodna_gene_priority_aggregate(
    """distinct select on columns"""
    distinct_on: [oncodna_gene_priority_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [oncodna_gene_priority_order_by!]

    """filter the rows returned"""
    where: oncodna_gene_priority_bool_exp
  ): oncodna_gene_priority_aggregate!

  """
  fetch data from the table: "oncodna_gene_priority" using primary key columns
  """
  oncodna_gene_priority_by_pk(sid: Int!): oncodna_gene_priority

  """
  fetch data from the table in a streaming manner: "oncodna_gene_priority"
  """
  oncodna_gene_priority_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [oncodna_gene_priority_stream_cursor_input]!

    """filter the rows returned"""
    where: oncodna_gene_priority_bool_exp
  ): [oncodna_gene_priority!]!

  """
  fetch data from the table: "oncodna_overridden_impact"
  """
  oncodna_overridden_impact(
    """distinct select on columns"""
    distinct_on: [oncodna_overridden_impact_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [oncodna_overridden_impact_order_by!]

    """filter the rows returned"""
    where: oncodna_overridden_impact_bool_exp
  ): [oncodna_overridden_impact!]!

  """
  fetch aggregated fields from the table: "oncodna_overridden_impact"
  """
  oncodna_overridden_impact_aggregate(
    """distinct select on columns"""
    distinct_on: [oncodna_overridden_impact_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [oncodna_overridden_impact_order_by!]

    """filter the rows returned"""
    where: oncodna_overridden_impact_bool_exp
  ): oncodna_overridden_impact_aggregate!

  """
  fetch data from the table: "oncodna_overridden_impact" using primary key columns
  """
  oncodna_overridden_impact_by_pk(sid: Int!): oncodna_overridden_impact

  """
  fetch data from the table in a streaming manner: "oncodna_overridden_impact"
  """
  oncodna_overridden_impact_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [oncodna_overridden_impact_stream_cursor_input]!

    """filter the rows returned"""
    where: oncodna_overridden_impact_bool_exp
  ): [oncodna_overridden_impact!]!

  """
  fetch data from the table: "oncodna_transcript_priority"
  """
  oncodna_transcript_priority(
    """distinct select on columns"""
    distinct_on: [oncodna_transcript_priority_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [oncodna_transcript_priority_order_by!]

    """filter the rows returned"""
    where: oncodna_transcript_priority_bool_exp
  ): [oncodna_transcript_priority!]!

  """
  fetch aggregated fields from the table: "oncodna_transcript_priority"
  """
  oncodna_transcript_priority_aggregate(
    """distinct select on columns"""
    distinct_on: [oncodna_transcript_priority_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [oncodna_transcript_priority_order_by!]

    """filter the rows returned"""
    where: oncodna_transcript_priority_bool_exp
  ): oncodna_transcript_priority_aggregate!

  """
  fetch data from the table: "oncodna_transcript_priority" using primary key columns
  """
  oncodna_transcript_priority_by_pk(sid: Int!): oncodna_transcript_priority

  """
  fetch data from the table in a streaming manner: "oncodna_transcript_priority"
  """
  oncodna_transcript_priority_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [oncodna_transcript_priority_stream_cursor_input]!

    """filter the rows returned"""
    where: oncodna_transcript_priority_bool_exp
  ): [oncodna_transcript_priority!]!

  """
  fetch data from the table: "protein"
  """
  protein(
    """distinct select on columns"""
    distinct_on: [protein_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [protein_order_by!]

    """filter the rows returned"""
    where: protein_bool_exp
  ): [protein!]!

  """
  fetch aggregated fields from the table: "protein"
  """
  protein_aggregate(
    """distinct select on columns"""
    distinct_on: [protein_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [protein_order_by!]

    """filter the rows returned"""
    where: protein_bool_exp
  ): protein_aggregate!

  """fetch data from the table: "protein" using primary key columns"""
  protein_by_pk(sid: Int!): protein

  """
  fetch data from the table in a streaming manner: "protein"
  """
  protein_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [protein_stream_cursor_input]!

    """filter the rows returned"""
    where: protein_bool_exp
  ): [protein!]!

  """
  fetch data from the table: "provider"
  """
  provider(
    """distinct select on columns"""
    distinct_on: [provider_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [provider_order_by!]

    """filter the rows returned"""
    where: provider_bool_exp
  ): [provider!]!

  """
  fetch aggregated fields from the table: "provider"
  """
  provider_aggregate(
    """distinct select on columns"""
    distinct_on: [provider_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [provider_order_by!]

    """filter the rows returned"""
    where: provider_bool_exp
  ): provider_aggregate!

  """fetch data from the table: "provider" using primary key columns"""
  provider_by_pk(sid: Int!): provider

  """
  fetch data from the table in a streaming manner: "provider"
  """
  provider_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [provider_stream_cursor_input]!

    """filter the rows returned"""
    where: provider_bool_exp
  ): [provider!]!

  """
  fetch data from the table: "task"
  """
  task(
    """distinct select on columns"""
    distinct_on: [task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_order_by!]

    """filter the rows returned"""
    where: task_bool_exp
  ): [task!]!

  """
  fetch aggregated fields from the table: "task"
  """
  task_aggregate(
    """distinct select on columns"""
    distinct_on: [task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [task_order_by!]

    """filter the rows returned"""
    where: task_bool_exp
  ): task_aggregate!

  """fetch data from the table: "task" using primary key columns"""
  task_by_pk(sid: Int!): task

  """
  fetch data from the table in a streaming manner: "task"
  """
  task_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [task_stream_cursor_input]!

    """filter the rows returned"""
    where: task_bool_exp
  ): [task!]!

  """
  fetch data from the table: "transcript"
  """
  transcript(
    """distinct select on columns"""
    distinct_on: [transcript_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transcript_order_by!]

    """filter the rows returned"""
    where: transcript_bool_exp
  ): [transcript!]!

  """
  fetch aggregated fields from the table: "transcript"
  """
  transcript_aggregate(
    """distinct select on columns"""
    distinct_on: [transcript_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [transcript_order_by!]

    """filter the rows returned"""
    where: transcript_bool_exp
  ): transcript_aggregate!

  """fetch data from the table: "transcript" using primary key columns"""
  transcript_by_pk(sid: Int!): transcript

  """
  fetch data from the table in a streaming manner: "transcript"
  """
  transcript_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [transcript_stream_cursor_input]!

    """filter the rows returned"""
    where: transcript_bool_exp
  ): [transcript!]!

  """
  fetch data from the table: "user_action"
  """
  user_action(
    """distinct select on columns"""
    distinct_on: [user_action_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_action_order_by!]

    """filter the rows returned"""
    where: user_action_bool_exp
  ): [user_action!]!

  """
  fetch aggregated fields from the table: "user_action"
  """
  user_action_aggregate(
    """distinct select on columns"""
    distinct_on: [user_action_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_action_order_by!]

    """filter the rows returned"""
    where: user_action_bool_exp
  ): user_action_aggregate!

  """
  fetch data from the table in a streaming manner: "user_action"
  """
  user_action_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [user_action_stream_cursor_input]!

    """filter the rows returned"""
    where: user_action_bool_exp
  ): [user_action!]!

  """
  fetch data from the table: "variant"
  """
  variant(
    """distinct select on columns"""
    distinct_on: [variant_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [variant_order_by!]

    """filter the rows returned"""
    where: variant_bool_exp
  ): [variant!]!

  """
  fetch aggregated fields from the table: "variant"
  """
  variant_aggregate(
    """distinct select on columns"""
    distinct_on: [variant_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [variant_order_by!]

    """filter the rows returned"""
    where: variant_bool_exp
  ): variant_aggregate!

  """fetch data from the table: "variant" using primary key columns"""
  variant_by_pk(sid: Int!): variant

  """
  fetch data from the table in a streaming manner: "variant"
  """
  variant_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [variant_stream_cursor_input]!

    """filter the rows returned"""
    where: variant_bool_exp
  ): [variant!]!
}

"""
columns and relationships of "task"
"""
type task {
  created_at: timestamp!
  duration_seconds: float8
  error(
    """JSON select path"""
    path: String
  ): jsonb
  payload(
    """JSON select path"""
    path: String
  ): jsonb
  priority: Int!
  processed_at: timestamp
  sid: Int!
  status: task_status!
  subscriber: String!
  uid: uuid
}

"""
aggregated selection of "task"
"""
type task_aggregate {
  aggregate: task_aggregate_fields
  nodes: [task!]!
}

"""
aggregate fields of "task"
"""
type task_aggregate_fields {
  avg: task_avg_fields
  count(columns: [task_select_column!], distinct: Boolean): Int!
  max: task_max_fields
  min: task_min_fields
  stddev: task_stddev_fields
  stddev_pop: task_stddev_pop_fields
  stddev_samp: task_stddev_samp_fields
  sum: task_sum_fields
  var_pop: task_var_pop_fields
  var_samp: task_var_samp_fields
  variance: task_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input task_append_input {
  error: jsonb
  payload: jsonb
}

"""aggregate avg on columns"""
type task_avg_fields {
  duration_seconds: Float
  priority: Float
  sid: Float
}

"""
Boolean expression to filter rows from the table "task". All fields are combined with a logical 'AND'.
"""
input task_bool_exp {
  _and: [task_bool_exp!]
  _not: task_bool_exp
  _or: [task_bool_exp!]
  created_at: timestamp_comparison_exp
  duration_seconds: float8_comparison_exp
  error: jsonb_comparison_exp
  payload: jsonb_comparison_exp
  priority: Int_comparison_exp
  processed_at: timestamp_comparison_exp
  sid: Int_comparison_exp
  status: task_status_comparison_exp
  subscriber: String_comparison_exp
  uid: uuid_comparison_exp
}

"""
unique or primary key constraints on table "task"
"""
enum task_constraint {
  """
  unique or primary key constraint on columns "sid"
  """
  task_pkey

  """
  unique or primary key constraint on columns "uid"
  """
  task_uid_key
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input task_delete_at_path_input {
  error: [String!]
  payload: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input task_delete_elem_input {
  error: Int
  payload: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input task_delete_key_input {
  error: String
  payload: String
}

"""
input type for incrementing numeric columns in table "task"
"""
input task_inc_input {
  duration_seconds: float8
  priority: Int
  sid: Int
}

"""
input type for inserting data into table "task"
"""
input task_insert_input {
  created_at: timestamp
  duration_seconds: float8
  error: jsonb
  payload: jsonb
  priority: Int
  processed_at: timestamp
  sid: Int
  status: task_status
  subscriber: String
  uid: uuid
}

"""aggregate max on columns"""
type task_max_fields {
  created_at: timestamp
  duration_seconds: float8
  priority: Int
  processed_at: timestamp
  sid: Int
  status: task_status
  subscriber: String
  uid: uuid
}

"""aggregate min on columns"""
type task_min_fields {
  created_at: timestamp
  duration_seconds: float8
  priority: Int
  processed_at: timestamp
  sid: Int
  status: task_status
  subscriber: String
  uid: uuid
}

"""
response of any mutation on the table "task"
"""
type task_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [task!]!
}

"""
on_conflict condition type for table "task"
"""
input task_on_conflict {
  constraint: task_constraint!
  update_columns: [task_update_column!]! = []
  where: task_bool_exp
}

"""Ordering options when selecting data from "task"."""
input task_order_by {
  created_at: order_by
  duration_seconds: order_by
  error: order_by
  payload: order_by
  priority: order_by
  processed_at: order_by
  sid: order_by
  status: order_by
  subscriber: order_by
  uid: order_by
}

"""primary key columns input for table: task"""
input task_pk_columns_input {
  sid: Int!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input task_prepend_input {
  error: jsonb
  payload: jsonb
}

"""
select columns of table "task"
"""
enum task_select_column {
  """column name"""
  created_at

  """column name"""
  duration_seconds

  """column name"""
  error

  """column name"""
  payload

  """column name"""
  priority

  """column name"""
  processed_at

  """column name"""
  sid

  """column name"""
  status

  """column name"""
  subscriber

  """column name"""
  uid
}

"""
input type for updating data in table "task"
"""
input task_set_input {
  created_at: timestamp
  duration_seconds: float8
  error: jsonb
  payload: jsonb
  priority: Int
  processed_at: timestamp
  sid: Int
  status: task_status
  subscriber: String
  uid: uuid
}

scalar task_status

"""
Boolean expression to compare columns of type "task_status". All fields are combined with logical 'AND'.
"""
input task_status_comparison_exp {
  _eq: task_status
  _gt: task_status
  _gte: task_status
  _in: [task_status!]
  _is_null: Boolean
  _lt: task_status
  _lte: task_status
  _neq: task_status
  _nin: [task_status!]
}

"""aggregate stddev on columns"""
type task_stddev_fields {
  duration_seconds: Float
  priority: Float
  sid: Float
}

"""aggregate stddev_pop on columns"""
type task_stddev_pop_fields {
  duration_seconds: Float
  priority: Float
  sid: Float
}

"""aggregate stddev_samp on columns"""
type task_stddev_samp_fields {
  duration_seconds: Float
  priority: Float
  sid: Float
}

"""
Streaming cursor of the table "task"
"""
input task_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: task_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input task_stream_cursor_value_input {
  created_at: timestamp
  duration_seconds: float8
  error: jsonb
  payload: jsonb
  priority: Int
  processed_at: timestamp
  sid: Int
  status: task_status
  subscriber: String
  uid: uuid
}

"""aggregate sum on columns"""
type task_sum_fields {
  duration_seconds: float8
  priority: Int
  sid: Int
}

"""
update columns of table "task"
"""
enum task_update_column {
  """column name"""
  created_at

  """column name"""
  duration_seconds

  """column name"""
  error

  """column name"""
  payload

  """column name"""
  priority

  """column name"""
  processed_at

  """column name"""
  sid

  """column name"""
  status

  """column name"""
  subscriber

  """column name"""
  uid
}

input task_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: task_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: task_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: task_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: task_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: task_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: task_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: task_set_input

  """filter the rows which have to be updated"""
  where: task_bool_exp!
}

"""aggregate var_pop on columns"""
type task_var_pop_fields {
  duration_seconds: Float
  priority: Float
  sid: Float
}

"""aggregate var_samp on columns"""
type task_var_samp_fields {
  duration_seconds: Float
  priority: Float
  sid: Float
}

"""aggregate variance on columns"""
type task_variance_fields {
  duration_seconds: Float
  priority: Float
  sid: Float
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "transcript"
"""
type transcript {
  acc_num_base: String
  acc_num_full: String
  acc_num_version: String
  annotation_ranges: int4multirange

  """An object relationship"""
  appris_mv: appris_mv
  attributes(
    """JSON select path"""
    path: String
  ): jsonb
  ccds_id: String
  cds_length: Int
  chromosome: chromosome!
  end: Int

  """An array relationship"""
  exons(
    """distinct select on columns"""
    distinct_on: [exon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [exon_order_by!]

    """filter the rows returned"""
    where: exon_bool_exp
  ): [exon!]!

  """An aggregate relationship"""
  exons_aggregate(
    """distinct select on columns"""
    distinct_on: [exon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [exon_order_by!]

    """filter the rows returned"""
    where: exon_bool_exp
  ): exon_aggregate!

  """An object relationship"""
  gene: gene
  gene_uid: uuid
  is_forward_strand: Boolean

  """An object relationship"""
  mane_mv: mane_mv

  """An object relationship"""
  protein: protein
  protein_uid: uuid

  """An object relationship"""
  provider: provider!
  provider_code: String!
  sid: Int!
  start: Int
  trad_end: Int
  trad_start: Int

  """cache used by oa-mut-annotator"""
  transcript_annotator_cache(
    """JSON select path"""
    path: String
  ): jsonb
  transcript_length: Int
  uid: uuid
}

"""
aggregated selection of "transcript"
"""
type transcript_aggregate {
  aggregate: transcript_aggregate_fields
  nodes: [transcript!]!
}

input transcript_aggregate_bool_exp {
  bool_and: transcript_aggregate_bool_exp_bool_and
  bool_or: transcript_aggregate_bool_exp_bool_or
  count: transcript_aggregate_bool_exp_count
}

input transcript_aggregate_bool_exp_bool_and {
  arguments: transcript_select_column_transcript_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: transcript_bool_exp
  predicate: Boolean_comparison_exp!
}

input transcript_aggregate_bool_exp_bool_or {
  arguments: transcript_select_column_transcript_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: transcript_bool_exp
  predicate: Boolean_comparison_exp!
}

input transcript_aggregate_bool_exp_count {
  arguments: [transcript_select_column!]
  distinct: Boolean
  filter: transcript_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "transcript"
"""
type transcript_aggregate_fields {
  avg: transcript_avg_fields
  count(columns: [transcript_select_column!], distinct: Boolean): Int!
  max: transcript_max_fields
  min: transcript_min_fields
  stddev: transcript_stddev_fields
  stddev_pop: transcript_stddev_pop_fields
  stddev_samp: transcript_stddev_samp_fields
  sum: transcript_sum_fields
  var_pop: transcript_var_pop_fields
  var_samp: transcript_var_samp_fields
  variance: transcript_variance_fields
}

"""
order by aggregate values of table "transcript"
"""
input transcript_aggregate_order_by {
  avg: transcript_avg_order_by
  count: order_by
  max: transcript_max_order_by
  min: transcript_min_order_by
  stddev: transcript_stddev_order_by
  stddev_pop: transcript_stddev_pop_order_by
  stddev_samp: transcript_stddev_samp_order_by
  sum: transcript_sum_order_by
  var_pop: transcript_var_pop_order_by
  var_samp: transcript_var_samp_order_by
  variance: transcript_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input transcript_append_input {
  attributes: jsonb

  """cache used by oa-mut-annotator"""
  transcript_annotator_cache: jsonb
}

"""
input type for inserting array relation for remote table "transcript"
"""
input transcript_arr_rel_insert_input {
  data: [transcript_insert_input!]!

  """upsert condition"""
  on_conflict: transcript_on_conflict
}

"""aggregate avg on columns"""
type transcript_avg_fields {
  cds_length: Float
  end: Float
  sid: Float
  start: Float
  trad_end: Float
  trad_start: Float
  transcript_length: Float
}

"""
order by avg() on columns of table "transcript"
"""
input transcript_avg_order_by {
  cds_length: order_by
  end: order_by
  sid: order_by
  start: order_by
  trad_end: order_by
  trad_start: order_by
  transcript_length: order_by
}

"""
Boolean expression to filter rows from the table "transcript". All fields are combined with a logical 'AND'.
"""
input transcript_bool_exp {
  _and: [transcript_bool_exp!]
  _not: transcript_bool_exp
  _or: [transcript_bool_exp!]
  acc_num_base: String_comparison_exp
  acc_num_full: String_comparison_exp
  acc_num_version: String_comparison_exp
  annotation_ranges: int4multirange_comparison_exp
  appris_mv: appris_mv_bool_exp
  attributes: jsonb_comparison_exp
  ccds_id: String_comparison_exp
  cds_length: Int_comparison_exp
  chromosome: chromosome_comparison_exp
  end: Int_comparison_exp
  exons: exon_bool_exp
  exons_aggregate: exon_aggregate_bool_exp
  gene: gene_bool_exp
  gene_uid: uuid_comparison_exp
  is_forward_strand: Boolean_comparison_exp
  mane_mv: mane_mv_bool_exp
  protein: protein_bool_exp
  protein_uid: uuid_comparison_exp
  provider: provider_bool_exp
  provider_code: String_comparison_exp
  sid: Int_comparison_exp
  start: Int_comparison_exp
  trad_end: Int_comparison_exp
  trad_start: Int_comparison_exp
  transcript_annotator_cache: jsonb_comparison_exp
  transcript_length: Int_comparison_exp
  uid: uuid_comparison_exp
}

"""
unique or primary key constraints on table "transcript"
"""
enum transcript_constraint {
  """
  unique or primary key constraint on columns "sid"
  """
  transcript_pkey

  """
  unique or primary key constraint on columns "uid"
  """
  transcript_uid_key
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input transcript_delete_at_path_input {
  attributes: [String!]

  """cache used by oa-mut-annotator"""
  transcript_annotator_cache: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input transcript_delete_elem_input {
  attributes: Int

  """cache used by oa-mut-annotator"""
  transcript_annotator_cache: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input transcript_delete_key_input {
  attributes: String

  """cache used by oa-mut-annotator"""
  transcript_annotator_cache: String
}

"""
input type for incrementing numeric columns in table "transcript"
"""
input transcript_inc_input {
  cds_length: Int
  end: Int
  sid: Int
  start: Int
  trad_end: Int
  trad_start: Int
  transcript_length: Int
}

"""
input type for inserting data into table "transcript"
"""
input transcript_insert_input {
  acc_num_base: String
  acc_num_full: String
  acc_num_version: String
  annotation_ranges: int4multirange
  appris_mv: appris_mv_obj_rel_insert_input
  attributes: jsonb
  ccds_id: String
  cds_length: Int
  chromosome: chromosome
  end: Int
  exons: exon_arr_rel_insert_input
  gene: gene_obj_rel_insert_input
  gene_uid: uuid
  is_forward_strand: Boolean
  mane_mv: mane_mv_obj_rel_insert_input
  protein: protein_obj_rel_insert_input
  protein_uid: uuid
  provider: provider_obj_rel_insert_input
  provider_code: String
  sid: Int
  start: Int
  trad_end: Int
  trad_start: Int

  """cache used by oa-mut-annotator"""
  transcript_annotator_cache: jsonb
  transcript_length: Int
  uid: uuid
}

"""aggregate max on columns"""
type transcript_max_fields {
  acc_num_base: String
  acc_num_full: String
  acc_num_version: String
  ccds_id: String
  cds_length: Int
  chromosome: chromosome
  end: Int
  gene_uid: uuid
  protein_uid: uuid
  provider_code: String
  sid: Int
  start: Int
  trad_end: Int
  trad_start: Int
  transcript_length: Int
  uid: uuid
}

"""
order by max() on columns of table "transcript"
"""
input transcript_max_order_by {
  acc_num_base: order_by
  acc_num_full: order_by
  acc_num_version: order_by
  ccds_id: order_by
  cds_length: order_by
  chromosome: order_by
  end: order_by
  gene_uid: order_by
  protein_uid: order_by
  provider_code: order_by
  sid: order_by
  start: order_by
  trad_end: order_by
  trad_start: order_by
  transcript_length: order_by
  uid: order_by
}

"""aggregate min on columns"""
type transcript_min_fields {
  acc_num_base: String
  acc_num_full: String
  acc_num_version: String
  ccds_id: String
  cds_length: Int
  chromosome: chromosome
  end: Int
  gene_uid: uuid
  protein_uid: uuid
  provider_code: String
  sid: Int
  start: Int
  trad_end: Int
  trad_start: Int
  transcript_length: Int
  uid: uuid
}

"""
order by min() on columns of table "transcript"
"""
input transcript_min_order_by {
  acc_num_base: order_by
  acc_num_full: order_by
  acc_num_version: order_by
  ccds_id: order_by
  cds_length: order_by
  chromosome: order_by
  end: order_by
  gene_uid: order_by
  protein_uid: order_by
  provider_code: order_by
  sid: order_by
  start: order_by
  trad_end: order_by
  trad_start: order_by
  transcript_length: order_by
  uid: order_by
}

"""
response of any mutation on the table "transcript"
"""
type transcript_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [transcript!]!
}

"""
input type for inserting object relation for remote table "transcript"
"""
input transcript_obj_rel_insert_input {
  data: transcript_insert_input!

  """upsert condition"""
  on_conflict: transcript_on_conflict
}

"""
on_conflict condition type for table "transcript"
"""
input transcript_on_conflict {
  constraint: transcript_constraint!
  update_columns: [transcript_update_column!]! = []
  where: transcript_bool_exp
}

"""Ordering options when selecting data from "transcript"."""
input transcript_order_by {
  acc_num_base: order_by
  acc_num_full: order_by
  acc_num_version: order_by
  annotation_ranges: order_by
  appris_mv: appris_mv_order_by
  attributes: order_by
  ccds_id: order_by
  cds_length: order_by
  chromosome: order_by
  end: order_by
  exons_aggregate: exon_aggregate_order_by
  gene: gene_order_by
  gene_uid: order_by
  is_forward_strand: order_by
  mane_mv: mane_mv_order_by
  protein: protein_order_by
  protein_uid: order_by
  provider: provider_order_by
  provider_code: order_by
  sid: order_by
  start: order_by
  trad_end: order_by
  trad_start: order_by
  transcript_annotator_cache: order_by
  transcript_length: order_by
  uid: order_by
}

"""primary key columns input for table: transcript"""
input transcript_pk_columns_input {
  sid: Int!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input transcript_prepend_input {
  attributes: jsonb

  """cache used by oa-mut-annotator"""
  transcript_annotator_cache: jsonb
}

"""
select columns of table "transcript"
"""
enum transcript_select_column {
  """column name"""
  acc_num_base

  """column name"""
  acc_num_full

  """column name"""
  acc_num_version

  """column name"""
  annotation_ranges

  """column name"""
  attributes

  """column name"""
  ccds_id

  """column name"""
  cds_length

  """column name"""
  chromosome

  """column name"""
  end

  """column name"""
  gene_uid

  """column name"""
  is_forward_strand

  """column name"""
  protein_uid

  """column name"""
  provider_code

  """column name"""
  sid

  """column name"""
  start

  """column name"""
  trad_end

  """column name"""
  trad_start

  """column name"""
  transcript_annotator_cache

  """column name"""
  transcript_length

  """column name"""
  uid
}

"""
select "transcript_aggregate_bool_exp_bool_and_arguments_columns" columns of table "transcript"
"""
enum transcript_select_column_transcript_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  is_forward_strand
}

"""
select "transcript_aggregate_bool_exp_bool_or_arguments_columns" columns of table "transcript"
"""
enum transcript_select_column_transcript_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  is_forward_strand
}

"""
input type for updating data in table "transcript"
"""
input transcript_set_input {
  acc_num_base: String
  acc_num_full: String
  acc_num_version: String
  annotation_ranges: int4multirange
  attributes: jsonb
  ccds_id: String
  cds_length: Int
  chromosome: chromosome
  end: Int
  gene_uid: uuid
  is_forward_strand: Boolean
  protein_uid: uuid
  provider_code: String
  sid: Int
  start: Int
  trad_end: Int
  trad_start: Int

  """cache used by oa-mut-annotator"""
  transcript_annotator_cache: jsonb
  transcript_length: Int
  uid: uuid
}

"""aggregate stddev on columns"""
type transcript_stddev_fields {
  cds_length: Float
  end: Float
  sid: Float
  start: Float
  trad_end: Float
  trad_start: Float
  transcript_length: Float
}

"""
order by stddev() on columns of table "transcript"
"""
input transcript_stddev_order_by {
  cds_length: order_by
  end: order_by
  sid: order_by
  start: order_by
  trad_end: order_by
  trad_start: order_by
  transcript_length: order_by
}

"""aggregate stddev_pop on columns"""
type transcript_stddev_pop_fields {
  cds_length: Float
  end: Float
  sid: Float
  start: Float
  trad_end: Float
  trad_start: Float
  transcript_length: Float
}

"""
order by stddev_pop() on columns of table "transcript"
"""
input transcript_stddev_pop_order_by {
  cds_length: order_by
  end: order_by
  sid: order_by
  start: order_by
  trad_end: order_by
  trad_start: order_by
  transcript_length: order_by
}

"""aggregate stddev_samp on columns"""
type transcript_stddev_samp_fields {
  cds_length: Float
  end: Float
  sid: Float
  start: Float
  trad_end: Float
  trad_start: Float
  transcript_length: Float
}

"""
order by stddev_samp() on columns of table "transcript"
"""
input transcript_stddev_samp_order_by {
  cds_length: order_by
  end: order_by
  sid: order_by
  start: order_by
  trad_end: order_by
  trad_start: order_by
  transcript_length: order_by
}

"""
Streaming cursor of the table "transcript"
"""
input transcript_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: transcript_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input transcript_stream_cursor_value_input {
  acc_num_base: String
  acc_num_full: String
  acc_num_version: String
  annotation_ranges: int4multirange
  attributes: jsonb
  ccds_id: String
  cds_length: Int
  chromosome: chromosome
  end: Int
  gene_uid: uuid
  is_forward_strand: Boolean
  protein_uid: uuid
  provider_code: String
  sid: Int
  start: Int
  trad_end: Int
  trad_start: Int

  """cache used by oa-mut-annotator"""
  transcript_annotator_cache: jsonb
  transcript_length: Int
  uid: uuid
}

"""aggregate sum on columns"""
type transcript_sum_fields {
  cds_length: Int
  end: Int
  sid: Int
  start: Int
  trad_end: Int
  trad_start: Int
  transcript_length: Int
}

"""
order by sum() on columns of table "transcript"
"""
input transcript_sum_order_by {
  cds_length: order_by
  end: order_by
  sid: order_by
  start: order_by
  trad_end: order_by
  trad_start: order_by
  transcript_length: order_by
}

"""
update columns of table "transcript"
"""
enum transcript_update_column {
  """column name"""
  acc_num_base

  """column name"""
  acc_num_full

  """column name"""
  acc_num_version

  """column name"""
  annotation_ranges

  """column name"""
  attributes

  """column name"""
  ccds_id

  """column name"""
  cds_length

  """column name"""
  chromosome

  """column name"""
  end

  """column name"""
  gene_uid

  """column name"""
  is_forward_strand

  """column name"""
  protein_uid

  """column name"""
  provider_code

  """column name"""
  sid

  """column name"""
  start

  """column name"""
  trad_end

  """column name"""
  trad_start

  """column name"""
  transcript_annotator_cache

  """column name"""
  transcript_length

  """column name"""
  uid
}

input transcript_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: transcript_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: transcript_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: transcript_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: transcript_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: transcript_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: transcript_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: transcript_set_input

  """filter the rows which have to be updated"""
  where: transcript_bool_exp!
}

"""aggregate var_pop on columns"""
type transcript_var_pop_fields {
  cds_length: Float
  end: Float
  sid: Float
  start: Float
  trad_end: Float
  trad_start: Float
  transcript_length: Float
}

"""
order by var_pop() on columns of table "transcript"
"""
input transcript_var_pop_order_by {
  cds_length: order_by
  end: order_by
  sid: order_by
  start: order_by
  trad_end: order_by
  trad_start: order_by
  transcript_length: order_by
}

"""aggregate var_samp on columns"""
type transcript_var_samp_fields {
  cds_length: Float
  end: Float
  sid: Float
  start: Float
  trad_end: Float
  trad_start: Float
  transcript_length: Float
}

"""
order by var_samp() on columns of table "transcript"
"""
input transcript_var_samp_order_by {
  cds_length: order_by
  end: order_by
  sid: order_by
  start: order_by
  trad_end: order_by
  trad_start: order_by
  transcript_length: order_by
}

"""aggregate variance on columns"""
type transcript_variance_fields {
  cds_length: Float
  end: Float
  sid: Float
  start: Float
  trad_end: Float
  trad_start: Float
  transcript_length: Float
}

"""
order by variance() on columns of table "transcript"
"""
input transcript_variance_order_by {
  cds_length: order_by
  end: order_by
  sid: order_by
  start: order_by
  trad_end: order_by
  trad_start: order_by
  transcript_length: order_by
}

"""
columns and relationships of "user_action"
"""
type user_action {
  action_name: String
  email: String
}

"""
aggregated selection of "user_action"
"""
type user_action_aggregate {
  aggregate: user_action_aggregate_fields
  nodes: [user_action!]!
}

"""
aggregate fields of "user_action"
"""
type user_action_aggregate_fields {
  count(columns: [user_action_select_column!], distinct: Boolean): Int!
  max: user_action_max_fields
  min: user_action_min_fields
}

"""
Boolean expression to filter rows from the table "user_action". All fields are combined with a logical 'AND'.
"""
input user_action_bool_exp {
  _and: [user_action_bool_exp!]
  _not: user_action_bool_exp
  _or: [user_action_bool_exp!]
  action_name: String_comparison_exp
  email: String_comparison_exp
}

"""aggregate max on columns"""
type user_action_max_fields {
  action_name: String
  email: String
}

"""aggregate min on columns"""
type user_action_min_fields {
  action_name: String
  email: String
}

"""Ordering options when selecting data from "user_action"."""
input user_action_order_by {
  action_name: order_by
  email: order_by
}

"""
select columns of table "user_action"
"""
enum user_action_select_column {
  """column name"""
  action_name

  """column name"""
  email
}

"""
Streaming cursor of the table "user_action"
"""
input user_action_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: user_action_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input user_action_stream_cursor_value_input {
  action_name: String
  email: String
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

"""
columns and relationships of "variant"
"""
type variant {
  alternate: String
  attributes(
    """JSON select path"""
    path: String
  ): jsonb
  chromosome: chromosome
  created_at: timestamptz
  hgvsg_hg19: String
  hgvsg_hg38: String
  hgvsgs: String!

  """An array relationship"""
  impact(
    """distinct select on columns"""
    distinct_on: [impact_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [impact_order_by!]

    """filter the rows returned"""
    where: impact_bool_exp
  ): [impact!]!

  """An aggregate relationship"""
  impact_aggregate(
    """distinct select on columns"""
    distinct_on: [impact_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [impact_order_by!]

    """filter the rows returned"""
    where: impact_bool_exp
  ): impact_aggregate!
  last_computed_provider_code: String

  """An array relationship"""
  main_impact(
    """distinct select on columns"""
    distinct_on: [main_impact_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [main_impact_order_by!]

    """filter the rows returned"""
    where: main_impact_bool_exp
  ): [main_impact!]!

  """An aggregate relationship"""
  main_impact_aggregate(
    """distinct select on columns"""
    distinct_on: [main_impact_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [main_impact_order_by!]

    """filter the rows returned"""
    where: main_impact_bool_exp
  ): main_impact_aggregate!
  position_hg19: Int
  position_hg38: Int
  reference: String
  sid: Int!
  uid: uuid
  variant_key_hg19: String
  variant_key_hg38: String
  variant_range_hg19: int4range
  variant_range_hg38: int4range
  variant_type: variant_type
}

"""
aggregated selection of "variant"
"""
type variant_aggregate {
  aggregate: variant_aggregate_fields
  nodes: [variant!]!
}

"""
aggregate fields of "variant"
"""
type variant_aggregate_fields {
  avg: variant_avg_fields
  count(columns: [variant_select_column!], distinct: Boolean): Int!
  max: variant_max_fields
  min: variant_min_fields
  stddev: variant_stddev_fields
  stddev_pop: variant_stddev_pop_fields
  stddev_samp: variant_stddev_samp_fields
  sum: variant_sum_fields
  var_pop: variant_var_pop_fields
  var_samp: variant_var_samp_fields
  variance: variant_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input variant_append_input {
  attributes: jsonb
}

"""aggregate avg on columns"""
type variant_avg_fields {
  position_hg19: Float
  position_hg38: Float
  sid: Float
}

"""
Boolean expression to filter rows from the table "variant". All fields are combined with a logical 'AND'.
"""
input variant_bool_exp {
  _and: [variant_bool_exp!]
  _not: variant_bool_exp
  _or: [variant_bool_exp!]
  alternate: String_comparison_exp
  attributes: jsonb_comparison_exp
  chromosome: chromosome_comparison_exp
  created_at: timestamptz_comparison_exp
  hgvsg_hg19: String_comparison_exp
  hgvsg_hg38: String_comparison_exp
  hgvsgs: String_comparison_exp
  impact: impact_bool_exp
  impact_aggregate: impact_aggregate_bool_exp
  last_computed_provider_code: String_comparison_exp
  main_impact: main_impact_bool_exp
  main_impact_aggregate: main_impact_aggregate_bool_exp
  position_hg19: Int_comparison_exp
  position_hg38: Int_comparison_exp
  reference: String_comparison_exp
  sid: Int_comparison_exp
  uid: uuid_comparison_exp
  variant_key_hg19: String_comparison_exp
  variant_key_hg38: String_comparison_exp
  variant_range_hg19: int4range_comparison_exp
  variant_range_hg38: int4range_comparison_exp
  variant_type: variant_type_comparison_exp
}

"""
unique or primary key constraints on table "variant"
"""
enum variant_constraint {
  """
  unique or primary key constraint on columns "sid"
  """
  variant_pkey

  """
  unique or primary key constraint on columns "uid"
  """
  variant_uid_key

  """
  unique or primary key constraint on columns "variant_key_hg19"
  """
  variant_variant_key_hg19_key

  """
  unique or primary key constraint on columns "variant_key_hg38"
  """
  variant_variant_key_hg38_key

  """unique or primary key constraint on columns """
  variant_variant_keys
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input variant_delete_at_path_input {
  attributes: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input variant_delete_elem_input {
  attributes: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input variant_delete_key_input {
  attributes: String
}

"""
input type for incrementing numeric columns in table "variant"
"""
input variant_inc_input {
  position_hg19: Int
  position_hg38: Int
  sid: Int
}

"""
input type for inserting data into table "variant"
"""
input variant_insert_input {
  alternate: String
  attributes: jsonb
  chromosome: chromosome
  created_at: timestamptz
  hgvsg_hg19: String
  hgvsg_hg38: String
  hgvsgs: String
  impact: impact_arr_rel_insert_input
  last_computed_provider_code: String
  main_impact: main_impact_arr_rel_insert_input
  position_hg19: Int
  position_hg38: Int
  reference: String
  sid: Int
  uid: uuid
  variant_key_hg19: String
  variant_key_hg38: String
  variant_type: variant_type
}

"""aggregate max on columns"""
type variant_max_fields {
  alternate: String
  chromosome: chromosome
  created_at: timestamptz
  hgvsg_hg19: String
  hgvsg_hg38: String
  hgvsgs: String
  last_computed_provider_code: String
  position_hg19: Int
  position_hg38: Int
  reference: String
  sid: Int
  uid: uuid
  variant_key_hg19: String
  variant_key_hg38: String
  variant_type: variant_type
}

"""aggregate min on columns"""
type variant_min_fields {
  alternate: String
  chromosome: chromosome
  created_at: timestamptz
  hgvsg_hg19: String
  hgvsg_hg38: String
  hgvsgs: String
  last_computed_provider_code: String
  position_hg19: Int
  position_hg38: Int
  reference: String
  sid: Int
  uid: uuid
  variant_key_hg19: String
  variant_key_hg38: String
  variant_type: variant_type
}

"""
response of any mutation on the table "variant"
"""
type variant_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [variant!]!
}

"""
input type for inserting object relation for remote table "variant"
"""
input variant_obj_rel_insert_input {
  data: variant_insert_input!

  """upsert condition"""
  on_conflict: variant_on_conflict
}

"""
on_conflict condition type for table "variant"
"""
input variant_on_conflict {
  constraint: variant_constraint!
  update_columns: [variant_update_column!]! = []
  where: variant_bool_exp
}

"""Ordering options when selecting data from "variant"."""
input variant_order_by {
  alternate: order_by
  attributes: order_by
  chromosome: order_by
  created_at: order_by
  hgvsg_hg19: order_by
  hgvsg_hg38: order_by
  hgvsgs: order_by
  impact_aggregate: impact_aggregate_order_by
  last_computed_provider_code: order_by
  main_impact_aggregate: main_impact_aggregate_order_by
  position_hg19: order_by
  position_hg38: order_by
  reference: order_by
  sid: order_by
  uid: order_by
  variant_key_hg19: order_by
  variant_key_hg38: order_by
  variant_range_hg19: order_by
  variant_range_hg38: order_by
  variant_type: order_by
}

"""primary key columns input for table: variant"""
input variant_pk_columns_input {
  sid: Int!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input variant_prepend_input {
  attributes: jsonb
}

"""
select columns of table "variant"
"""
enum variant_select_column {
  """column name"""
  alternate

  """column name"""
  attributes

  """column name"""
  chromosome

  """column name"""
  created_at

  """column name"""
  hgvsg_hg19

  """column name"""
  hgvsg_hg38

  """column name"""
  hgvsgs

  """column name"""
  last_computed_provider_code

  """column name"""
  position_hg19

  """column name"""
  position_hg38

  """column name"""
  reference

  """column name"""
  sid

  """column name"""
  uid

  """column name"""
  variant_key_hg19

  """column name"""
  variant_key_hg38

  """column name"""
  variant_range_hg19

  """column name"""
  variant_range_hg38

  """column name"""
  variant_type
}

"""
input type for updating data in table "variant"
"""
input variant_set_input {
  alternate: String
  attributes: jsonb
  chromosome: chromosome
  created_at: timestamptz
  hgvsg_hg19: String
  hgvsg_hg38: String
  hgvsgs: String
  last_computed_provider_code: String
  position_hg19: Int
  position_hg38: Int
  reference: String
  sid: Int
  uid: uuid
  variant_key_hg19: String
  variant_key_hg38: String
  variant_type: variant_type
}

"""aggregate stddev on columns"""
type variant_stddev_fields {
  position_hg19: Float
  position_hg38: Float
  sid: Float
}

"""aggregate stddev_pop on columns"""
type variant_stddev_pop_fields {
  position_hg19: Float
  position_hg38: Float
  sid: Float
}

"""aggregate stddev_samp on columns"""
type variant_stddev_samp_fields {
  position_hg19: Float
  position_hg38: Float
  sid: Float
}

"""
Streaming cursor of the table "variant"
"""
input variant_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: variant_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input variant_stream_cursor_value_input {
  alternate: String
  attributes: jsonb
  chromosome: chromosome
  created_at: timestamptz
  hgvsg_hg19: String
  hgvsg_hg38: String
  hgvsgs: String
  last_computed_provider_code: String
  position_hg19: Int
  position_hg38: Int
  reference: String
  sid: Int
  uid: uuid
  variant_key_hg19: String
  variant_key_hg38: String
  variant_range_hg19: int4range
  variant_range_hg38: int4range
  variant_type: variant_type
}

"""aggregate sum on columns"""
type variant_sum_fields {
  position_hg19: Int
  position_hg38: Int
  sid: Int
}

scalar variant_type

"""
Boolean expression to compare columns of type "variant_type". All fields are combined with logical 'AND'.
"""
input variant_type_comparison_exp {
  _eq: variant_type
  _gt: variant_type
  _gte: variant_type
  _in: [variant_type!]
  _is_null: Boolean
  _lt: variant_type
  _lte: variant_type
  _neq: variant_type
  _nin: [variant_type!]
}

"""
update columns of table "variant"
"""
enum variant_update_column {
  """column name"""
  alternate

  """column name"""
  attributes

  """column name"""
  chromosome

  """column name"""
  created_at

  """column name"""
  hgvsg_hg19

  """column name"""
  hgvsg_hg38

  """column name"""
  hgvsgs

  """column name"""
  last_computed_provider_code

  """column name"""
  position_hg19

  """column name"""
  position_hg38

  """column name"""
  reference

  """column name"""
  sid

  """column name"""
  uid

  """column name"""
  variant_key_hg19

  """column name"""
  variant_key_hg38

  """column name"""
  variant_type
}

input variant_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: variant_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: variant_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: variant_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: variant_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: variant_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: variant_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: variant_set_input

  """filter the rows which have to be updated"""
  where: variant_bool_exp!
}

"""aggregate var_pop on columns"""
type variant_var_pop_fields {
  position_hg19: Float
  position_hg38: Float
  sid: Float
}

"""aggregate var_samp on columns"""
type variant_var_samp_fields {
  position_hg19: Float
  position_hg38: Float
  sid: Float
}

"""aggregate variance on columns"""
type variant_variance_fields {
  position_hg19: Float
  position_hg38: Float
  sid: Float
}

